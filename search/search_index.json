{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#alunos","title":"Alunos","text":"Matr\u00edcula Aluno Usu\u00e1rio Foto de Perfil 22/1022604 Jo\u00e3o Victor da Silva Batista de Farias @beyondmagic 20/2046283 Millena de Abreu Queiroz @MillenaQueiroz 22/2006169 Natan da Cruz Almeida @natanalmeida03 22/1022408 Paulo Henrique Lamounier Dantas @Nanashii76 22/1031363 Renan Vieira Guedes @R-enanVieira"},{"location":"#sobre","title":"Sobre","text":"<p>Unimancer \u00e9 um jogo estilo MUD (Multi-User Dungeon), offline e baseado em texto, onde voc\u00ea \u00e9 lan\u00e7ado em um mundo m\u00e1gico profundo e imersivo, em que magos lend\u00e1rios buscam o poder absoluto, o segredo perdido dos elementos e os mais arcanos conhecimentos.</p> <p>H\u00e1 mil\u00eanios, o fr\u00e1gil equil\u00edbrio entre os elementos sustentava o vasto imp\u00e9rio de Arcanae. Os Unimancers, magos dedicados, eram os guardi\u00f5es desse equil\u00edbrio. Eles dominavam os elementos mais poderosos, consagrando-se ao estudo incans\u00e1vel, \u00e0 cria\u00e7\u00e3o de magias ancestrais e \u00e0 descoberta de runas que datam da origem do mundo. Cada mago era um pilar de seu pr\u00f3prio elemento, zelando para que o tecido c\u00f3smico n\u00e3o se rasgasse.</p> <p>Por\u00e9m, com o tempo, o mestre mago Nosferus foi consumido pela insaci\u00e1vel sede de poder e conhecimento. Cansado das limita\u00e7\u00f5es impostas pelas especializa\u00e7\u00f5es, ele partiu para uma jornada ousada e trai\u00e7oeira: reunir todos os pergaminhos arcanos deixados pelos antigos magos nas dungeons que permeiam as terras de Arcanae. Diz-se que esses pergaminhos escondem os segredos das for\u00e7as elementares que controlam a pr\u00f3pria exist\u00eancia. Nosferus desapareceu nas sombrias profundezas da Floresta do Abismo, onde as lendas afirmam que os maiores conhecimentos est\u00e3o ocultos \u2014 protegidos por enigmas mortais e criaturas impiedosas. Muitos ousaram seguir seus passos, mas nenhum retornou.</p> <p>Agora, os magos, especializados em um \u00fanico elemento, est\u00e3o espalhados pelo mundo, buscando n\u00e3o s\u00f3 o conhecimento perdido, mas tamb\u00e9m o dom\u00ednio absoluto sobre as for\u00e7as que governam tudo ao seu redor. Sua miss\u00e3o \u00e9 simples, mas mortal: recuperar a sabedoria esquecida, dominar a \u00e1rvore de habilidades ancestral e, assim, restaurar ou corromper o fr\u00e1gil equil\u00edbrio dos elementos. A cada passo, o destino de Arcanae est\u00e1 por um fio.</p> <p>Ser\u00e1 voc\u00ea o her\u00f3i que trar\u00e1 a harmonia de volta ou o vil\u00e3o que mergulhar\u00e1 o mundo na ~~destrui\u00e7\u00e3o e no caos~~? </p> <p>Dicion\u00e1rio de dados</p>"},{"location":"#apresentacoes","title":"Apresenta\u00e7\u00f5es","text":"<ol> <li>Entrega de DER, MER, MR e DD;</li> <li>Entrega do SQL;</li> <li>Entrega dos procedures / triggers - Jogo ;</li> <li>Refina\u00e7\u00f5es finais de procedures e visualiza\u00e7\u00e3o do PGAdmin..</li> </ol>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#modulo-1","title":"M\u00f3dulo 1","text":"<p>Diagrama de Entidade-Relacionamento</p> <p></p> <p>Modelo Relacionamento</p> <p></p>"},{"location":"#modulo-2","title":"M\u00f3dulo 2","text":"<p>Diagrama de Entidade-Relacionamento</p> <p></p> <p>Modelo Relacionamento</p> <p></p>"},{"location":"#modulo-3","title":"M\u00f3dulo 3","text":"<p>Triggers</p> <p></p> <p>Tela inicial do jogo</p> <p></p> <p>Tela de navega\u00e7\u00e3o do jogo</p> <p></p>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Tecnologia: PostgreSQL, python;</p> <p>Modelo do Banco: draw.io;</p> <p>Descreva os pr\u00e9-requisitos para rodar o seu projeto e os comandos necess\u00e1rios.</p>"},{"location":"#uso","title":"Uso","text":"<p>Para executar o projeto, inicialmente clone o reposit\u00f3rio usando</p> <pre><code>&gt; git clone https://github.com/SBD1/2024.2-unimancer\n</code></pre> <p>Ap\u00f3s clonar seu reposit\u00f3rio, certifique-se de estar com o docker e o python instalado, para verificar basta utilizar</p> <pre><code>&gt; python --version\n\n&gt; docker --version\n</code></pre> <p>Caso n\u00e3o tenha, acesse a documenta\u00e7\u00e3o para instalar docker python</p> <p>Entrando no diret\u00f3rio do projeto, primeiro precisamos configurar o ambiente para roda-lo. Para isso, execute o comando a seguir:</p> <pre><code>&gt; make config\n</code></pre> <p>Ap\u00f3s isso, ser\u00e1 necess\u00e1rio subir os containers, onde temos o banco de dados por tr\u00e1s do projeto e o PgAdmin, que \u00e9 uma interface para visualizar o banco</p> <pre><code>&gt; make build\n</code></pre> <p>para gerar o docker, o arquivo est\u00e1 configurado para utilizar a porta 5432 para o banco de dados e a porta 5050 para a interface do pg admin, certifique-se de estar com essas portas livres ou edite-as no arquivo <code>docker-compose.yml</code></p> <p>Agora para definitivamente embarcar nessa jornada, basta executar o programa em seu terminal utilizando</p> <pre><code>&gt; make int reset\n&gt; make int\n</code></pre>"},{"location":"#outros","title":"Outros","text":""},{"location":"#mecanicas-do-jogo","title":"Mec\u00e2nicas do Jogo","text":"<ul> <li>Atacar inimigo;</li> <li>Comprar e/ou vender itens;</li> </ul>"},{"location":"#criacao-de-personagem","title":"Cria\u00e7\u00e3o de Personagem","text":"<ul> <li>Personalize seu personagem escolhendo seu nome e especializa\u00e7\u00e3o m\u00e1gica.</li> <li>Escolha entre os quatro elementos dispon\u00edveis:<ul> <li>\u00c1gua: Magias de l\u00edquidos e manipula\u00e7\u00e3o de fluxo;</li> <li>Fogo: Magias destrutivas e agressivas;</li> <li>Terra: Defesa e resist\u00eancia inigual\u00e1veis;</li> <li>Vento: Velocidade e controle estrat\u00e9gico;</li> <li>Luz: Magia arcana antiga, garante ben\u00e7\u00e3os ao usu\u00e1rio;</li> <li>Trevas: Magia condenada, utilizada por magos corrompidos;</li> </ul> </li> </ul>"},{"location":"#progressao","title":"Progress\u00e3o","text":"<ul> <li>Explore um grafo de habilidades \u00fanico, desbloqueando magias avan\u00e7adas ao encontrar grim\u00f3rios m\u00e1gicos e completar quests.</li> <li>Resolva desafios em dungeons para ganhar conhecimento arcano e pontos de habilidade.</li> </ul>"},{"location":"#combate-estrategico","title":"Combate Estrat\u00e9gico","text":"<ul> <li>Sistema de combate turn-based com foco em buffs, debuffs e explora\u00e7\u00e3o de fraquezas elementais.</li> <li>Cada inimigo tem um elemento pr\u00f3prio que pode ser explorado para vantagem estrat\u00e9gica.</li> </ul>"},{"location":"#exploracao-e-descoberta","title":"Explora\u00e7\u00e3o e Descoberta","text":"<ul> <li>Viaje por regi\u00f5es m\u00e1gicas, cada uma oferecendo buffs ou debuffs baseados na sua especializa\u00e7\u00e3o.</li> <li>\u00c1reas podem estar bloqueadas at\u00e9 que certas condi\u00e7\u00f5es sejam atendidas.</li> </ul>"},{"location":"#npcs-e-quests","title":"NPCs e Quests","text":"<ul> <li>Interaja com NPCs que oferecem quests e lore adicionais.</li> <li>Complete tarefas para desbloquear recompensas, como equipamentos raros e dicas sobre novas \u00e1reas.</li> </ul>"},{"location":"#sistema-de-inventario","title":"Sistema de Invent\u00e1rio","text":"<ul> <li>Gerencie um invent\u00e1rio limitado, organizando itens importantes como pergaminhos, po\u00e7\u00f5es e armas m\u00e1gicas.</li> <li>Recursos escassos incentivam escolhas estrat\u00e9gicas.</li> </ul>"},{"location":"#salvar-e-continuar","title":"Salvar e Continuar","text":"<ul> <li>Progresso salvo automaticamente ao descansar em \u00e1reas seguras ou concluir tarefas importantes.</li> </ul>"},{"location":"#regioes-do-jogo","title":"Regi\u00f5es do Jogo","text":"ID Nome Regi\u00e3o 1 Ferraria do Albnur Vilarejo do Amanhecer 2 Pra\u00e7a Central 3 Casa do Anci\u00e3o 4 Taberna da Caneca Partida 5 Clareira dos Esp\u00edritos Floresta Eterna 6 Bosque Sombrio 7 Lago da Serenidade 8 Ru\u00ednas Perdidas 9 Fenda do Abismo Ru\u00ednas do Abismo 10 Pra\u00e7a das Est\u00e1tuas 11 Entrada da Ru\u00edna 12 Santu\u00e1rio Perdido 13 O\u00e1sis dos Mercadores Deserto de Areias Infinitas 14 Vale das Serpentes 15 Ru\u00ednas Submersas 16 Caverna de Cristal 17 Trono de Cristal Caverna Cristalizada 18 N\u00facleo Cristalino 19 Vale da Fortuna 20 Entrada Cristalizada 21 Pico Congelado Montanha do Crep\u00fasculo 22 Vilarejo dos Gigantes 23 Ponte Suspensa 24 Cavernas Ecoantes 25 Vila Esquecida Caverna Soterrada 26 Bosque Perdido 27 Monte Ca\u00eddo 28 Jardim de Ossos 29 Catedral Queimada Terras Devastadas 30 Plan\u00edcies de Cinzas 31 Fenda Arcana 32 Cemit\u00e9rio"},{"location":"#tabela-de-inimigos","title":"Tabela de Inimigos","text":"ID Nome Elemento Vida M\u00e1xima XP Obtido Moedas Obtidas Conhecimento Arcano Energia Arcana M\u00e1xima Intelig\u00eancia 1 Rato Selvagem Terra 20 5 2 0 0 1 2 Corvo Guardi\u00e3o Ar 25 8 3 0 0 2 3 Ladr\u00e3o de Rua Trevas 30 10 5 0 0 3 4 Lobo Sombrio Trevas 50 20 10 0 0 4 5 Esp\u00edrito da Clareira Luz 40 15 0 10 20 5 6 Ent Anci\u00e3o Terra 70 25 15 5 10 3 7 Guardi\u00e3o de Pedra Terra 80 30 20 0 0 2 8 Serpente das Sombras Trevas 60 25 10 5 10 4 9 Espectro do Abismo Trevas 50 20 5 20 30 8 10 Escorpi\u00e3o Gigante Terra 90 35 15 0 0 3 11 Djin Trai\u00e7oeiro Fogo 60 30 20 15 40 10 12 Caravaneiro Corrompido Luz 70 30 25 5 10 6 13 Golem de Cristal Terra 150 70 30 5 10 3 14 Minerador Fantasma Trevas 80 50 20 15 30 6 15 Afortunado Luz 100 60 40 20 40 10 16 Gigante Congelado \u00c1gua 120 50 30 5 15 5 17 \u00c1guia do Crep\u00fasculo Ar 80 40 20 10 25 7 18 Esp\u00edrito da Geada \u00c1gua 70 35 10 20 50 9 19 Guerreiro Esqueleto Trevas 70 35 15 5 0 3 20 Feiticeiro Esqueleto Trevas 60 40 10 25 50 12 21 Goblin Zumbi Trevas 50 20 5 0 0 2 22 Guerreiro Corrompido Trevas 100 60 50 10 20 7 23 Fera Flamejante Fogo 110 55 40 15 30 8 24 Drag\u00e3o da Devasta\u00e7\u00e3o Trevas 200 100 100 50 100 20"},{"location":"#tabela-de-bosses","title":"Tabela de Bosses","text":"ID Nome Elemento Vida M\u00e1xima XP Obtido Moedas Obtidas Conhecimento Arcano Energia Arcana M\u00e1xima Intelig\u00eancia 25 Abgail Fogo 150 60 75 100 100 12 26 Lumina Luz 180 75 90 120 90 15 27 Necromante Trevas 200 85 100 110 120 14 28 Nosferus Trevas 220 100 125 130 80 18"},{"location":"apresentacoes/1a-entrega/","title":"Entrega de DER, MER, MR e DD","text":""},{"location":"modelagem/dd/","title":"Dicion\u00e1rio de Dados","text":""},{"location":"modelagem/dd/#tipos","title":"Tipos","text":""},{"location":"modelagem/dd/#tipo_inventario","title":"TIPO_INVENTARIO","text":"<ul> <li>'Mochila';</li> <li>'Grim\u00f3rio'.</li> </ul>"},{"location":"modelagem/dd/#tipo_elemento","title":"TIPO_ELEMENTO","text":"<ul> <li>'Fogo';</li> <li>'\u00c1gua';</li> <li>'Terra';</li> <li>'Ar';</li> <li>'Trevas';</li> <li>'Luz'.</li> </ul>"},{"location":"modelagem/dd/#tipo_dificuldade","title":"TIPO_DIFICULDADE","text":"<ul> <li>'Iniciante';</li> <li>'F\u00e1cil';</li> <li>'M\u00e9dio';</li> <li>'Dif\u00edcil';</li> <li>'Legend\u00e1rio'.</li> </ul>"},{"location":"modelagem/dd/#tipo_item","title":"TIPO_ITEM","text":"<ul> <li>'Po\u00e7\u00e3o';</li> <li>'Acess\u00f3rio'.</li> </ul>"},{"location":"modelagem/dd/#tipo_feitico","title":"TIPO_FEITICO","text":"<ul> <li>'Dano';</li> <li>'Dano de \u00e1rea';</li> <li>'Cura'.</li> </ul>"},{"location":"modelagem/dd/#tipo_npc","title":"TIPO_NPC","text":"<ul> <li>'Civil';</li> <li>'Inimigo'.</li> </ul>"},{"location":"modelagem/dd/#tipo_civil","title":"TIPO_CIVIL","text":"<ul> <li>'Mercador';</li> <li>'Quester'.</li> </ul>"},{"location":"modelagem/dd/#tipo_direcao","title":"TIPO_DIRECAO","text":"<ul> <li>'Norte';</li> <li>'Sul';</li> <li>'Leste';</li> <li>'Oeste';</li> <li>'Cima';</li> <li>'Baixo'.</li> </ul>"},{"location":"modelagem/dd/#tipo_situacao","title":"TIPO_SITUACAO","text":"<ul> <li>'Pass\u00e1vel';</li> <li>'N\u00e3o Pass\u00e1vel'.</li> </ul>"},{"location":"modelagem/dd/#tipo_acessorio","title":"TIPO_ACESSORIO","text":"<ul> <li>'Anel';</li> <li>'Chap\u00e9u';</li> <li>'Colar';</li> <li>'Bracelete';</li> <li>'Fivela';</li> <li>'Luvas';</li> <li>'Botas';</li> <li>'Cal\u00e7a';</li> <li>'Meias';</li> <li>'Bengala';</li> <li>'Manto'.</li> </ul>"},{"location":"modelagem/dd/#entidades-e-atributos","title":"Entidades e Atributos","text":""},{"location":"modelagem/dd/#item","title":"Item","text":"<p>Descri\u00e7\u00e3o: Informa\u00e7\u00f5es referente ao item.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY descricao TEXT NOT NULL chance_drop INT NOT NULL CHECK (chance_drop &gt;= 0) nome VARCHAR(20) NOT NULL peso INT NOT NULL CHECK (peso &gt;= 0) preco INT NOT NULL CHECK (preco &gt;= 0)"},{"location":"modelagem/dd/#armazenamento","title":"Armazenamento","text":"<p>Descri\u00e7\u00e3o: Itens guardados que podem acessados por um local ou NPC.</p> Nome Tipo de Dado Restri\u00e7\u00f5es item_id INT NOT NULL id INT NOT NULL quantidade INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna item_id item id"},{"location":"modelagem/dd/#regiao","title":"Regiao","text":"<p>Descri\u00e7\u00e3o: Representa as regi\u00f5es acess\u00edveis no jogo.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY nome VARCHAR(50) NOT NULL descricao TEXT NOT NULL elemento TIPO_ELEMENTO NOT NULL"},{"location":"modelagem/dd/#sub-regiao","title":"Sub-Regiao","text":"<p>Descri\u00e7\u00e3o: Subconjunto de localidades de cada regi\u00e3o.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY regiao_id INT NOT NULL armazenamento_id INT - nome VARCHAR(50) NOT NULL descricao TEXT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna regiao_id regiao id"},{"location":"modelagem/dd/#sub-regiao-conexao","title":"Sub-Regiao Conexao","text":"<p>Descri\u00e7\u00e3o: Conex\u00e3o entre sub-regi\u00f5es.~</p> Nome Tipo de Dado Restri\u00e7\u00f5es sub_regiao_1 INT NOT NULL sub_regiao_2 INT NOT NULL descricao TIPO_DIRECAO NOT NULL situacao TIPO_SITUACAO NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna sub_regiao_1 regiao id sub_regiao_1 regiao id"},{"location":"modelagem/dd/#sub-regiao-acessorio-conexao","title":"Sub-regiao Acessorio conex\u00e3o","text":"<p>Descri\u00e7\u00e3o:</p> Nome Tipo de Dado Restri\u00e7\u00f5es sub_regiao1_id INT NOT NULL sub_regiao2_id INT NOT NULL acessorio_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna sub_regiao1_id sub_regiao id sub_regiao2_id sub_regiao id acessorio_id acessorio id"},{"location":"modelagem/dd/#personagem","title":"Personagem","text":"<p>Descri\u00e7\u00e3o: Representa os dados armazenados em cada personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY sub_regiao_id INT NOT NULL nome VARCHAR(20) NOT NULL elemento TIPO_ELEMENTO NOT NULL conhecimento_arcano INT NOT NULL CHECK (conhecimento_arcano &gt;= 0) vida INT NOT NULL CHECK (vida &gt;= 0) vida_maxima INT NOT NULL CHECK (vida_maxima &gt;= 0) xp INT NOT NULL CHECK (xp &gt;= 0) xp_total INT NOT NULL CHECK (xp_total &gt;= 0) energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0) energia_arcana_maxima INT NOT NULL CHECK (energia_arcana_maxima &gt;= 0) inteligencia INT NOT NULL CHECK (inteligencia &gt;= 0) moedas INT NOT NULL CHECK (moedas &gt;= 0) nivel INT NOT NULL CHECK (nivel &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna sub_regiao_id sub_regiao id"},{"location":"modelagem/dd/#inventario","title":"Inventario","text":"<p>Descri\u00e7\u00e3o: Tabela de invent\u00e1rio e seu respectivo tipo.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY personagem_id INT NOT NULL tipo TIPO_INVENTARIO NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna personagem_id personagem id"},{"location":"modelagem/dd/#npc","title":"Npc","text":"<p>Descri\u00e7\u00e3o: Representa os dados armazenados na tabela.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY nome VARCHAR(20) NOT NULL tipo TIPO_NPC NOT NULL"},{"location":"modelagem/dd/#civil","title":"Civil","text":"<p>Descri\u00e7\u00e3o: Tipo de NPC iterag\u00edvel, pertecente \u00e0s cidades.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT NOT NULL sub_regiao_id INT NOT NULL descricao TEXT NOT NULL tipo_civil TIPO_CIVIL - <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id npc id sub_regiao_id sub_regiao id"},{"location":"modelagem/dd/#quester","title":"Quester","text":"<p>Descri\u00e7\u00e3o: Tipo de NPC que oferece quest aos personagens.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY dialogo TEXT NOT NULL num_quests INT NOT NULL CHECK (num_quests &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id npc id"},{"location":"modelagem/dd/#quest","title":"Quest","text":"<p>Descri\u00e7\u00e3o: Representa cada miss\u00e3o ofertada pelos questers.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY quester_id INT NOT NULL armazenamento_id INT NOT NULL titulo VARCHAR(20) NOT NULL descricao TEXT NOT NULL recompensa TEXT NOT NULL dificuldade TIPO_DIFICULDADE NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna quester_id quester id armazenamento_id armazenamento id"},{"location":"modelagem/dd/#quest-instancia","title":"Quest Instancia","text":"<p>Descri\u00e7\u00e3o: Inst\u00e2ncia de cada quest aceita ou armazenada pelo personagem e quester.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY quest_id INT NOT NULL personagem_id INT NOT NULL completed BOOLEAN NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna quest_id quest id personagem_id personagem id"},{"location":"modelagem/dd/#item-instancia","title":"Item Instancia","text":"<p>Descri\u00e7\u00e3o: Instancia de cada item.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY item_id INT NOT NULL inventario_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna item_id item id inventario_id inventario id"},{"location":"modelagem/dd/#mercador","title":"Mercador","text":"<p>Descri\u00e7\u00e3o: Tipo de NPC que vende itens ao personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY armazenamento_id INT NOT NULL dialogo TEXT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id npc id armazenamento_id armazenamento id"},{"location":"modelagem/dd/#armazenamento-mercador","title":"Armazenamento Mercador","text":"<p>Descri\u00e7\u00e3o: Tabela para armazenar a quantidade de itens do mercador.</p> Nome Tipo de Dado Restri\u00e7\u00f5es mercador_id INT NOT NULL armazenamento_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna mercador_id mercador id armazenamento_id armazenamento id"},{"location":"modelagem/dd/#transacao","title":"Transacao","text":"<p>Descri\u00e7\u00e3o: Representa cada compra/venda feita pelo personagem com o mercador.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY mercador_id INT NOT NULL personagem_id INT NOT NULL item_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna mercador_id mercador id personagem_id personagem id item_id item id"},{"location":"modelagem/dd/#mochila","title":"Mochila","text":"<p>Descri\u00e7\u00e3o: Tipo de invent\u00e1rio do personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY peso INT NOT NULL CHECK (peso &lt;= peso AND peso &gt;= 0) peso_total INT NOT NULL CHECK (peso_total &gt;= 0)"},{"location":"modelagem/dd/#feitico","title":"Feitico","text":"<p>Descri\u00e7\u00e3o: Dados do feitico, sendo ele seus requerimentos, energia arcana necess\u00e1ria, elemento e descri\u00e7\u00e3o.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY descricao TEXT NOT NULL elemento TIPO_ELEMENTO NOT NULL countdown INT NOT NULL CHECK (countdown &gt;= 0) energia_arcana_necessaria INT NOT NULL CHECK (energia_arcana_necessaria &gt;= 0) energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0) tipo TIPO_FEITICO NOT NULL"},{"location":"modelagem/dd/#feitico-requerido","title":"Feitico Requerido","text":"<p>Descri\u00e7\u00e3o: O feitico que \u00e9 requerido para ter outro feitico.</p> Nome Tipo de Dado Restri\u00e7\u00f5es de_id INT NOT NULL para_id TEXT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna de_id feitico id para_id feitico id"},{"location":"modelagem/dd/#feitico-dano","title":"Feitico Dano","text":"<p>Descri\u00e7\u00e3o: Tipo de feiti\u00e7o que concede dano a um inimigo espec\u00edfico.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY dano_total INT NOT NULL CHECK (dano_total &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id feitico id"},{"location":"modelagem/dd/#feitico-dano-area","title":"Feitico Dano Area","text":"<p>Descri\u00e7\u00e3o: Tipo de feiti\u00e7o que concede dano em \u00e1rea em N inimigos.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY qtd_inimigos_afetados INT NOT NULL CHECK (qtd_inimigos_afetados &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id feitico id"},{"location":"modelagem/dd/#feitico-cura","title":"Feitico Cura","text":"<p>Descri\u00e7\u00e3o: Tipo de feiti\u00e7o que concede cura ao personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY qtd_cura INT NOT NULL CHECK (qtd_cura &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id feitico id"},{"location":"modelagem/dd/#grimorio","title":"Grimorio","text":"<p>Descri\u00e7\u00e3o: Tipo de invent\u00e1rio dod personagem que cont\u00eam seus feiti\u00e7os.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY num_pag INT NOT NULL CHECK (num_pag &lt;= num_pag_maximo AND num_pag &gt;= 0) num_pag_maximo INT NOT NULL CHECK (num_pag_maximo &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id inventario id"},{"location":"modelagem/dd/#feitico-aprendido","title":"Feitico Aprendido","text":"<p>Descri\u00e7\u00e3o: Representa o feiti\u00e7o aprendido pelo personagem, armazenado em seu grim\u00f3rio.</p> Nome Tipo de Dado Restri\u00e7\u00f5es inventario_id INT NOT NULL feitico_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna invetario_id inventario id feitico_id feitico id"},{"location":"modelagem/dd/#pergaminho","title":"Pergaminho","text":"<p>Descri\u00e7\u00e3o: Item do tipo consum\u00edvel que ensina um feiti\u00e7o para o personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY cor VARCHAR(10) NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id item id"},{"location":"modelagem/dd/#feitico-escrito","title":"Feiti\u00e7o escrito","text":"<p>Descri\u00e7\u00e3o: Representa o tipo de feitico presente em algum item.</p> Nome Tipo de Dado Restri\u00e7\u00f5es item_id INT NOT NULL feitico_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna item_id item id feitico_id feitico id"},{"location":"modelagem/dd/#efeito","title":"Efeito","text":"<p>Descri\u00e7\u00e3o: Efeitos que podem ser aplicados.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY nome VARCHAR(20) NOT NULL descricao TEXT NOT NULL critico DECIMAL(1, 3) NOT NULL defesa DECIMAL(1, 3) NOT NULL inteligencia DECIMAL(1, 3) NOT NULL vida DECIMAL(1, 3) NOT NULL energia_arcana DECIMAL(1, 3) NOT NULL sorte DECIMAL(1, 3) NOT NULL xp DECIMAL(1, 3) NOT NULL moedas DECIMAL(1, 3) NOT NULL"},{"location":"modelagem/dd/#acessorio","title":"Acessorio","text":"<p>Descri\u00e7\u00e3o: Tipo de item equip\u00e1vel que concede atributos ao personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY tipo TIPO_ACESSORIO NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id item id"},{"location":"modelagem/dd/#acessorio-efeito","title":"Acessorio Efeito","text":"<p>Descri\u00e7\u00e3o: Efeito que um acess\u00f3rio possui.</p> Nome Tipo de Dado Restri\u00e7\u00f5es acessorio_id INT NOT NULL efeito_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna acessorio_id item id efeito_id efeito id"},{"location":"modelagem/dd/#pocao","title":"Pocao","text":"<p>Descri\u00e7\u00e3o: Tipo de item consum\u00edvel que causa algum efeito ao personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT PRIMARY KEY turnos INT NOT NULL CHECK (duracao &gt;= 0) usado BOOL NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id item id"},{"location":"modelagem/dd/#pocao-efeito","title":"Pocao Efeito","text":"<p>Descri\u00e7\u00e3o: Efeito que po\u00e7\u00e3o possui.</p> Nome Tipo de Dado Restri\u00e7\u00f5es pocao_id INT NOT NULL efeito_id DECIMAL(1,3) NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna pocao_id pocao id efeito_id efeito id"},{"location":"modelagem/dd/#inimigo","title":"Inimigo","text":"<p>Descri\u00e7\u00e3o: Representa os dados armazenados do NPC do tipo Inimigo.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id INT NOT NULL UNIQUE armazenamento_id INT NOT NULL descricao TEXT NOT NULL elemento TIPO_ELEMENTO NOT NULL vida_maxima INT NOT NULL CHECK (vida_maxima &gt;= 0) xp_obtido INT NOT NULL CHECK (xp_obtido &gt;= 0) inteligencia INT NOT NULL CHECK (inteligencia &gt;= 0) modas_obtidas INT NOT NULL CHECK (moedas_obtidas &gt;= 0) conhecimento_arcano INT NOT NULL CHECK (conhecimento_arcano &gt;= 0) energia_arcana_maxima INT NOT NULL CHECK (energia_arcana_maxima &gt;= 0) dialogo TEXT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna id_inimigo tipo_npc id_npc armazenamento_id armazenamento id"},{"location":"modelagem/dd/#armazenamento-inimigo","title":"Armazenamento Inimigo","text":"<p>Descri\u00e7\u00e3o: Armanezamento de itens do inimigo.</p> Nome Tipo de Dado Restri\u00e7\u00f5es inimigo_id INT NOT NULL armazenamento_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna inimigo_id inimigo id armazenamento_id armazenamento id"},{"location":"modelagem/dd/#feitico-inimigo","title":"Feitico Inimigo","text":"<p>Descri\u00e7\u00e3o: Feiti\u00e7os que inimigo possui.</p> Nome Tipo de Dado Restri\u00e7\u00f5es inimigo_id INT NOT NULL efeito_id INT NOT NULL <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna inimigo_id inimigo id efeito_id efeito id"},{"location":"modelagem/dd/#inimigo-instancia","title":"Inimigo Instancia","text":"<p>Descri\u00e7\u00e3o: Instancia de um Inimigo.</p> Nome Tipo de Dado Restri\u00e7\u00f5es id SERIAL PRIMARY KEY inimigo_id INT NOT NULL sub_regiao_id INT NOT NULL vida INT NOT NULL CHECK (vida &gt;=0 ) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna inimigo_id inimigo id sub_regiao_id sub_regiao id"},{"location":"modelagem/dd/#combate","title":"Combate","text":"<p>Descri\u00e7\u00e3o: Representa o combate entre um inimigo e o personagem.</p> Nome Tipo de Dado Restri\u00e7\u00f5es inimigo_instancia_id INT NOT NULL personagem_id INT NOT NULL dano_causado INT NOT NULL CHECK (dano_causado &gt;= 0) dano_recebido INT NOT NULL CHECK (dano_recebido &gt;= 0) <p>Chaves Estrangeiras:</p> Coluna Referencia Tabela Referencia Coluna inimigo_instancia_id inimigo_instancia id personagem_id personagem id Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 25/11/2024 Cria\u00e7\u00e3o Grupo <code>1.1</code> 04/01/2025 Arrumando entidades e restri\u00e7\u00f5es Grupo <code>3.0</code> 12/01/2025 Arrumando entidades e restri\u00e7\u00f5es Grupo"},{"location":"modelagem/der/","title":"Diagrama Entidade-Relacionamento - DER","text":""},{"location":"modelagem/der/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O Diagrama Entidade-Relacionamento (DER) \u00e9 formado por elementos gr\u00e1ficos que representam os componentes do modelo Entidade-Relacionamento, como entidades, atributos, chaves, relacionamentos e restri\u00e7\u00f5es estruturais. Ele oferece uma vis\u00e3o l\u00f3gica do banco de dados, apresentando uma estrutura geral e simplificada de como os dados de um sistema est\u00e3o organizados.</p> <p>"},{"location":"modelagem/der/#versao-10","title":"Vers\u00e3o 1.0","text":"Diagrama Entidade-Relacionamento"},{"location":"modelagem/der/#versao-11","title":"Vers\u00e3o 1.1","text":"Diagrama Entidade-Relacionamento"},{"location":"modelagem/der/#versao-20","title":"Vers\u00e3o 2.0","text":"Diagrama Entidade-Relacionamento"},{"location":"modelagem/der/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 28/10/2024 Cria\u00e7\u00e3o Grupo <code>2.0</code> 22/11/2024 Adicionado na documenta\u00e7\u00e3o Grupo <code>2.1</code> 25/11/2024 Atualia\u00e7\u00e3o Grupo <code>2.2</code> 12/01/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"modelagem/mer/","title":"Modelo Entidade Relacionamento \u2013 MER","text":""},{"location":"modelagem/mer/#introducao","title":"Introducao","text":"<p>O Modelo Entidade-Relacionamento (MER) \u00e9 uma ferramenta utilizada para representar elementos do mundo real por meio de entidades, que possuem caracter\u00edsticas chamadas atributos, e das conex\u00f5es entre elas, que s\u00e3o os relacionamentos. </p>"},{"location":"modelagem/mer/#entidades","title":"Entidades","text":"<ul> <li>CRIATURA<ul> <li>Personagem</li> <li>Inst\u00e2ncia de Inimigo</li> </ul> </li> <li>NPC<ul> <li>Inimigo </li> <li>Civil<ul> <li>Quester </li> <li>Mercador </li> </ul> </li> </ul> </li> <li>ITEM<ul> <li>Consum\u00edvel<ul> <li>Po\u00e7\u00e3o</li> <li>Pergaminho</li> </ul> </li> <li>N\u00e3o-Consum\u00edvel</li> </ul> </li> <li>INST\u00c2NCIA DE ITEM</li> <li>INVENTARIO<ul> <li>Grim\u00f3rio</li> <li>Mochila</li> </ul> </li> <li>QUEST</li> <li>INSTANCIA DE QUEST</li> <li>FEITI\u00c7O<ul> <li>Dano</li> <li>Dano_em_area</li> <li>Cura</li> </ul> </li> <li>REGI\u00c3O</li> <li>LOCAL</li> </ul>"},{"location":"modelagem/mer/#atributos","title":"Atributos","text":"<ul> <li>CRIATURA:{ id, moedas, pontos_de_vida, nivel:{ xp, pontos_vida_maximo, energia_arcana_maxima } }<ul> <li>Personagem:{ nome, elemento, conhecimento_arcano, pontos_vida_atual, energia_arcana_atual, inteligencia, progresso:{ quests_realizadas, nr_inimigos_derrotados } }</li> <li>Inst\u00e2ncia de Inimigo</li> </ul> </li> <li>NPC:{ id, nome, dialogo }<ul> <li>Inimigo:{ id, nome, elemento, pontos_vida_total, inteligencia }</li> <li>Civil<ul> <li>Quester </li> <li>Mercador:{ id, vendas, elemento }</li> </ul> </li> </ul> </li> <li>ITEM:{ id, chance_drop, nome, peso, preco }<ul> <li>Consum\u00edvel<ul> <li>Po\u00e7\u00e3o:{ efeito, duracao }</li> <li>Pergaminho:{ cor, descricao }</li> </ul> </li> <li>N\u00e3o-Consum\u00edvel:{ buff, debuff }</li> </ul> </li> <li>INST\u00c2NCIA DE ITEM:{ id }</li> <li>INVENTARIO:{ id }<ul> <li>Grim\u00f3rio:{ nr_paginas }</li> <li>Mochila:{ peso_maximo, peso_atual }</li> </ul> </li> <li>QUEST:{ id, titulo, descricao, recompensa, dificuldade }</li> <li>INST\u00c2NCIA DE QUEST:{ id, recompensa_moedas, status }</li> <li>FEITI\u00c7O:{ nome, elemento, energia_arcana_necessaria }<ul> <li>Dano:{ dano_total }</li> <li>Dano_em_area:{ qtd_inimigos_afetados, dano_total }</li> <li>Cura:{ qtd_cura }</li> </ul> </li> <li>REGI\u00c3O:{ id, nome, descricao, elemento_regiao }</li> <li>LOCAL:{ id, nome, descricao }</li> </ul>"},{"location":"modelagem/mer/#relacionamentos","title":"Relacionamentos","text":"<ul> <li>Criatura Habita Local</li> <li>Personagem Cont\u00e9m Invent\u00e1rio</li> <li>Personagem Transaciona com Mercador uma Inst\u00e2ncia de Item</li> <li>Personagem Confronta Inst\u00e2ncia de Inimigo</li> <li>Inimigo Tem Inst\u00e2ncia de Inimigo</li> <li>Inimigo Fornece Item</li> <li>Civel Habita Local</li> <li>Quester Oferta Inst\u00e2ncia de Quest</li> <li>Mercador Fornece Item</li> <li>Item Tem Inst\u00e2ncia de Item</li> <li>Pergaminho Cont\u00e9m Feiti\u00e7o</li> <li>Grim\u00f3rio Cont\u00e9m Feiti\u00e7o</li> <li>Mochila Cont\u00e9m Inst\u00e2ncia de Item</li> <li>Quest Tem Inst\u00e2ncia de Quest</li> <li>Feiti\u00e7o Requer Feiti\u00e7o</li> <li>Regi\u00e3o Cont\u00e9m Local</li> <li>Local Cont\u00e9m Instancia de Item</li> <li>Local Cont\u00e9m Local</li> </ul>"},{"location":"modelagem/mer/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 24/11/2024 Cria\u00e7\u00e3o do MER Grupo <code>1.1</code> 25/11/2024 Atualiza\u00e7\u00e3o do MER Grupo"},{"location":"modelagem/mr/","title":"Modelo Relacional - MR","text":""},{"location":"modelagem/mr/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O Modelo Relacional (MR) \u00e9 uma forma de organizar dados em bancos de dados, que armazena e fornece acesso a dados relacionados entre si.</p>"},{"location":"modelagem/mr/#mrel","title":"MREL","text":"<p>"},{"location":"modelagem/mr/#versao-10","title":"Vers\u00e3o 1.0","text":"Modelo Relacional"},{"location":"modelagem/mr/#versao-20","title":"Vers\u00e3o 2.0","text":"Modelo Relacional"},{"location":"modelagem/mr/#versao-30","title":"Vers\u00e3o 3.0","text":"Modelo Relacional <p>\"&gt;</p> <p></p>"},{"location":"modelagem/mr/#versao-45","title":"Vers\u00e3o 4.5","text":"Modelo Relacional"},{"location":"modelagem/mr/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 24/11/2024 Cria\u00e7\u00e3o Grupo <code>2.0</code> 27/12/2024 Cria\u00e7\u00e3o Grupo <code>2.1</code> 05/01/2025 Cria\u00e7\u00e3o Grupo <code>3.0</code> 12/01/2025 Atualiza\u00e7\u00e3o Grupo <code>4.0</code> 21/01/2025 Atualiza\u00e7\u00e3o Grupo <code>4.5</code> 03/02/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"sql/ddl/","title":"Data Definition Language - DDL","text":""},{"location":"sql/ddl/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>DDL \u00e9 um conjunto de comandos usados em sistemas de gerenciamento de banco de dados para criar, alterar e gerenciar a estrutura dos bancos de dados.</p>"},{"location":"sql/ddl/#ddl","title":"DDL","text":"<pre><code>CREATE TABLE item (\n    id SERIAL PRIMARY KEY,\n    tipo TIPO_ITEM NOT NULL\n);\n\nCREATE TABLE armazenamento (\n    id SERIAL PRIMARY KEY,\n    item_id INT NOT NULL REFERENCES item(id),\n    quantidade INT NOT NULL\n);\n\nCREATE TABLE regiao (\n    id SERIAL PRIMARY KEY,\n    nome VARCHAR(50) NOT NULL,\n    descricao TEXT NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL\n);\n\nCREATE TABLE sub_regiao (\n    id SERIAL PRIMARY KEY,\n    regiao_id INT NOT NULL REFERENCES regiao(id),\n    armazenamento_id INT REFERENCES armazenamento(id),\n    nome VARCHAR(50) NOT NULL,\n    descricao TEXT NOT NULL\n);\n\nCREATE TABLE sub_regiao_conexao (\n    sub_regiao_1 INT NOT NULL REFERENCES sub_regiao(id),\n    sub_regiao_2 INT NOT NULL REFERENCES sub_regiao(id),\n    direcao TIPO_DIRECAO NOT NULL,\n    situacao TIPO_SITUACAO NOT NULL\n);\n\nCREATE TABLE personagem (\n    id SERIAL PRIMARY KEY,\n    sub_regiao_id INT NOT NULL REFERENCES sub_regiao(id),\n    nome VARCHAR(50) NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL,\n    conhecimento_arcano INT NOT NULL CHECK (conhecimento_arcano &gt;= 0),\n    vida INT NOT NULL CHECK (vida &gt;= 0),\n    vida_maxima INT NOT NULL CHECK (vida_maxima &gt;= 0),\n    xp INT NOT NULL CHECK (xp &gt;= 0),\n    xp_total INT NOT NULL CHECK (xp_total &gt;= 0),\n    energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0),\n    energia_arcana_maxima INT NOT NULL CHECK (energia_arcana_maxima &gt;= 0),\n    inteligencia INT NOT NULL CHECK (inteligencia &gt;= 0),\n    moedas INT NOT NULL CHECK (moedas &gt;= 0),\n    nivel INT NOT NULL CHECK (nivel &gt;= 0)\n);\n\nCREATE TABLE inventario (\n    id SERIAL PRIMARY KEY,\n    personagem_id INT NOT NULL REFERENCES personagem(id),\n    tipo TIPO_INVENTARIO NOT NULL\n);\n\nCREATE TABLE npc (\n    id SERIAL PRIMARY KEY,\n    tipo TIPO_NPC NOT NULL\n);\n\nCREATE TABLE civil (\n    id INT NOT NULL PRIMARY KEY REFERENCES npc(id),\n    sub_regiao_id INT NOT NULL REFERENCES sub_regiao(id),\n    tipo TIPO_CIVIL NOT NULL,\n    nome VARCHAR(100) NOT NULL,\n    descricao TEXT NOT NULL\n);\n\nCREATE TABLE quester (\n    id INT NOT NULL PRIMARY KEY REFERENCES npc(id),\n    num_quests INT NOT NULL CHECK (num_quests &gt;= 0),\n    dialogo TEXT NOT NULL\n);\n\nCREATE TABLE quest (\n    id SERIAL PRIMARY KEY,\n    quester_id INT NOT NULL REFERENCES quester(id),\n    armazenamento_id INT NOT NULL REFERENCES armazenamento(id),\n    sub_regiao_id INT NOT NULL REFERENCES sub_regiao(id),\n    titulo VARCHAR(200) NOT NULL,\n    descricao TEXT NOT NULL,\n    recompensa TEXT NOT NULL,\n    dificuldade TIPO_DIFICULDADE NOT NULL\n);\n\nCREATE TABLE quest_instancia (\n    id SERIAL PRIMARY KEY,\n    quest_id INT NOT NULL REFERENCES quest(id),\n    personagem_id INT NOT NULL REFERENCES personagem(id),\n    completed BOOLEAN NOT NULL\n);\n\nCREATE TABLE mercador (\n    id INT NOT NULL PRIMARY KEY REFERENCES npc(id),\n    dialogo TEXT NOT NULL\n);\n\nCREATE TABLE armazenamento_mercador (\n    mercador_id INT NOT NULL REFERENCES mercador(id),\n    armazenamento_id INT NOT NULL REFERENCES armazenamento(id)\n);\n\nCREATE TABLE transacao (\n    id SERIAL PRIMARY KEY,\n    mercador_id INT NOT NULL REFERENCES mercador(id),\n    personagem_id INT NOT NULL REFERENCES personagem(id),\n    item_id INT NOT NULL REFERENCES item(id)\n);\n\nCREATE TABLE mochila (\n    id INT NOT NULL PRIMARY KEY REFERENCES inventario(id),\n    peso INT NOT NULL CHECK (peso &lt;= peso_total AND peso &gt;= 0),\n    peso_total INT NOT NULL CHECK (peso_total &gt;= 0)\n);\n\nCREATE TABLE item_instancia (\n    id SERIAL PRIMARY KEY,\n    item_id INT NOT NULL REFERENCES item(id),\n    mochila_id INT NOT NULL REFERENCES mochila(id),\n    usado BOOLEAN NOT NULL DEFAULT FALSE\n);\n\nCREATE TABLE feitico (\n    id SERIAL PRIMARY KEY,\n    tipo TIPO_FEITICO NOT NULL\n);\n\nCREATE TABLE feitico_requerimento (\n    de_id INT NOT NULL REFERENCES feitico(id),\n    para_id INT NOT NULL REFERENCES feitico(id)\n);\n\nCREATE TABLE feitico_dano (\n    id INT PRIMARY KEY REFERENCES feitico(id),\n    dano_total INT NOT NULL CHECK (dano_total &gt;= 0),\n    descricao TEXT NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL,\n    countdown INT NOT NULL CHECK (countdown &gt;= 0),\n    conhecimento_arcano_necessario INT NOT NULL CHECK (conhecimento_arcano_necessario &gt;= 0),\n    energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0),\n    nome VARCHAR(200) NOT NULL\n);\n\nCREATE TABLE feitico_dano_area (\n    id INT PRIMARY KEY REFERENCES feitico(id),\n    dano INT NOT NULL CHECK (dano &gt;= 0),\n    qtd_inimigos_afetados INT NOT NULL CHECK (qtd_inimigos_afetados &gt;= 0),\n    descricao TEXT NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL,\n    countdown INT NOT NULL CHECK (countdown &gt;= 0),\n    conhecimento_arcano_necessario INT NOT NULL CHECK (conhecimento_arcano_necessario &gt;= 0),\n    energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0),\n    nome VARCHAR(200) NOT NULL\n);\n\nCREATE TABLE feitico_cura (\n    id INT PRIMARY KEY REFERENCES feitico(id),\n    qtd_cura INT NOT NULL CHECK (qtd_cura &gt;= 0),\n    descricao TEXT NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL,\n    countdown INT NOT NULL CHECK (countdown &gt;= 0),\n    conhecimento_arcano_necessario INT NOT NULL CHECK (conhecimento_arcano_necessario &gt;= 0),\n    energia_arcana INT NOT NULL CHECK (energia_arcana &gt;= 0),\n    nome VARCHAR(200) NOT NULL\n);\n\nCREATE TABLE grimorio (\n    id INT NOT NULL PRIMARY KEY REFERENCES inventario(id),\n    num_pag INT NOT NULL CHECK (num_pag &lt;= num_pag_maximo AND num_pag &gt;= 0),\n    num_pag_maximo INT NOT NULL CHECK (num_pag_maximo &gt;= 0)\n);\n\nCREATE TABLE feitico_aprendido (\n    grimorio_id INT NOT NULL REFERENCES grimorio(id),\n    feitico_id INT NOT NULL REFERENCES feitico(id)\n);\n\nCREATE TABLE pergaminho (\n    id INT PRIMARY KEY REFERENCES item(id),\n    cor VARCHAR(10) NOT NULL,\n    descricao TEXT NOT NULL,\n    drop_inimigos_media INT NOT NULL CHECK (drop_inimigos_media &gt;= 0),\n    nome VARCHAR(200) NOT NULL,\n    peso INT NOT NULL CHECK (peso &gt;= 0),\n    preco INT NOT NULL CHECK (preco &gt;= 0)\n);\n\nCREATE TABLE feitico_escrito (\n    item_id INT NOT NULL REFERENCES pergaminho(id),\n    feitico_id INT NOT NULL REFERENCES feitico(id)\n);\n\nCREATE TABLE efeito (\n    id SERIAL PRIMARY KEY,\n    nome VARCHAR(100) NOT NULL,\n    descricao TEXT NOT NULL,\n    inteligencia DECIMAL(4, 3) NOT NULL, CHECK (inteligencia &gt;= 0),\n    vida DECIMAL(4, 3) NOT NULL, CHECK (vida &gt;= 0),\n    energia_arcana DECIMAL(4, 3) NOT NULL, CHECK (energia_arcana &gt;= 0)\n);\n\nCREATE TABLE acessorio (\n    id INT PRIMARY KEY REFERENCES item(id),\n    tipo TIPO_ACESSORIO NOT NULL,\n    descricao TEXT NOT NULL,\n    drop_inimigos_media INT NOT NULL CHECK (drop_inimigos_media &gt;= 0),\n    nome VARCHAR(200) NOT NULL,\n    peso INT NOT NULL CHECK (peso &gt;= 0),\n    preco INT NOT NULL CHECK (preco &gt;= 0)\n);\n\nCREATE TABLE sub_regiao_acessorio_conexao (\n    sub_regiao1_id INT NOT NULL REFERENCES sub_regiao(id),\n    sub_regiao2_id INT NOT NULL REFERENCES sub_regiao(id),\n    acessorio_id INT NOT NULL REFERENCES acessorio(id)\n);\n\nCREATE TABLE acessorio_efeito (\n    acessorio_id INT NOT NULL REFERENCES acessorio(id),\n    efeito_id INT NOT NULL REFERENCES efeito(id)\n);\n\nCREATE TABLE pocao (\n    id INT PRIMARY KEY REFERENCES item(id),\n    descricao TEXT NOT NULL,\n    drop_inimigos_media INT NOT NULL CHECK (drop_inimigos_media &gt;= 0),\n    nome VARCHAR(200) NOT NULL,\n    peso INT NOT NULL CHECK (peso &gt;= 0),\n    preco INT NOT NULL CHECK (preco &gt;= 0)\n);\n\nCREATE TABLE pocao_efeito (\n    pocao_id INT NOT NULL REFERENCES pocao(id),\n    efeito_id INT NOT NULL REFERENCES efeito(id)\n);\n\nCREATE TABLE inimigo (\n    id INT NOT NULL PRIMARY KEY REFERENCES npc(id),\n    emoji TEXT NOT NULL,\n    nome VARCHAR(100) NOT NULL,\n    descricao TEXT NOT NULL,\n    elemento TIPO_ELEMENTO NOT NULL,\n    vida_maxima INT NOT NULL CHECK (vida_maxima &gt;= 0),\n    xp_obtido INT NOT NULL CHECK (xp_obtido &gt;= 0),\n    inteligencia INT NOT NULL CHECK (inteligencia &gt;= 0),\n    moedas_obtidas INT NOT NULL CHECK (moedas_obtidas &gt;= 0),\n    conhecimento_arcano INT NOT NULL CHECK (conhecimento_arcano &gt;= 0),\n    energia_arcana_maxima INT NOT NULL CHECK (energia_arcana_maxima &gt;= 0),\n    dialogo TEXT -- To-do: change to not null\n);\n\nCREATE TABLE armazenamento_inimigo (\n    inimigo_id INT NOT NULL REFERENCES inimigo(id),\n    armazenamento_id INT NOT NULL REFERENCES armazenamento(id)\n);\n\nCREATE TABLE inimigo_instancia (\n    id SERIAL PRIMARY KEY,\n    inimigo_id INT NOT NULL REFERENCES inimigo(id),\n    sub_regiao_id INT NOT NULL REFERENCES sub_regiao(id),\n    vida INT NOT NULL CHECK (vida &gt;= 0)\n);\n\nCREATE TABLE combate (\n    inimigo_instancia_id INT NOT NULL REFERENCES inimigo_instancia(id),\n    personagem_id INT NOT NULL REFERENCES personagem(id),\n    dano_causado INT NOT NULL CHECK (dano_causado &gt;= 0),\n    dano_recebido INT NOT NULL CHECK (dano_recebido &gt;= 0)\n);\n</code></pre>"},{"location":"sql/ddl/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 13/01/2024 Cria\u00e7\u00e3o Grupo <code>2.0</code> 10/02/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"sql/dml/","title":"Data Manipulation Language - DML","text":""},{"location":"sql/dml/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>DML \u00e9 um conjunto de instru\u00e7\u00f5es SQL que permitem consultar, adicionar, editar e excluir dados de tabelas ou visualiza\u00e7\u00f5es de banco de dados</p>"},{"location":"sql/dml/#dml","title":"DML","text":"<pre><code># Create a character.\ndef add_character(conn, nome: str, elemento: str) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT criar_personagem(\n                '{nome}',\n                '{elemento}'\n            )\"\"\"\n        )\n        result = cur.fetchone()\n        conn.commit()\n        return result[0]\n\n\n# Delete a item instance from a character inventory.\ndef delete_item_instance(conn, id: int) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            DELETE FROM item_instancia\n            WHERE id = {id};\n            \"\"\"\n        )\n        conn.commit()\n\n# Activate an instance of item (potion).\ndef update_item_instance(conn, id: int, used: bool) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            UPDATE item_instancia\n            SET usado = {used}\n            WHERE id = {id};\n            \"\"\"\n        )\n        conn.commit()\n\n# Update `energia_arcana` after using spell.\ndef get_update_character_mp(conn, character_id: int, spell_value: int) -&gt; int:\n    with conn.cursor() as cur:\n        cur.execute(f\"\"\"\n            UPDATE personagem\n            SET energia_arcana = energia_arcana - {spell_value}\n            WHERE id = {character_id}\n            RETURNING energia_arcana;\n        \"\"\")\n        result = cur.fetchone()\n        conn.commit()\n        return result[0]\n\n    return None\n\n# function to reset enemies\ndef reset_enemies(conn, subregiao_id: int) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            UPDATE\n                inimigo_instancia ii\n            SET\n                vida = i.vida_maxima\n            FROM inimigo i\n            WHERE ii.inimigo_id = i.id AND ii.sub_regiao_id = {subregiao_id}\n            \"\"\"\n        )\n        conn.commit()\n\n# function to change subregion\ndef update_character_subregion(conn, character_id: int, sub_region_id: int) -&gt; int:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            UPDATE personagem\n                SET sub_regiao_id = {sub_region_id}\n            WHERE personagem.id = {character_id}\n            RETURNING sub_regiao_id;\n            \"\"\"\n        )\n        result = cur.fetchone()[0]\n        conn.commit()\n        return result\n\n# Update a combat between a caracter and enemies.\ndef update_combat(conn , enemies: List[Enemy], character: Character) -&gt; None:\n    with conn.cursor() as cursor:\n        for enemy in enemies:\n            cursor.execute(\n                f\"\"\"\n                SELECT atualizar_combate(\n                    {character.id},\n                    {enemy.id},\n                    {int(character.vida)},\n                    {int(enemy.vida)}\n                );\n                \"\"\"\n            )\n        conn.commit()\n\n# Add a spell to a character spellbook.\ndef add_learned_spells(conn, spellbook_id: int, spells_ids: List[int]) -&gt; None:\n    with conn.cursor() as cur:\n        for spell_id in spells_ids:\n            cur.execute(\n                f\"\"\"\n                INSERT INTO feitico_aprendido (grimorio_id, feitico_id)\n                VALUES ({spellbook_id}, {spell_id});\n                \"\"\"\n            )\n        conn.commit()\n\n# Add an instance of item in a backpack.\ndef add_items_instance(conn, backpack_id: int, item_ids: List[int]) -&gt; None:\n    with conn.cursor() as cur:\n        for item_id in item_ids:\n            cur.execute(\n                f\"\"\"\n                INSERT INTO item_instancia (item_id, mochila_id, usado)\n                VALUES ({item_id}, {backpack_id}, FALSE)\n                RETURNING item_id;\n                \"\"\"\n            )\n        conn.commit()\n\n\n# function to sell an item to merchant\ndef sell_item(conn, character_id, item_id, preco_venda, merchant_id):\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            DELETE FROM item_instancia\n            WHERE id = (\n                SELECT ii.id\n                FROM item_instancia ii\n                JOIN mochila m ON ii.mochila_id = m.id\n                JOIN inventario inv ON m.id = inv.id\n                WHERE inv.personagem_id = %s AND ii.item_id = %s\n                LIMIT 1\n            )\n        \"\"\", (character_id, item_id))\n\n        cursor.execute(\"\"\"\n            INSERT INTO transacao (mercador_id, personagem_id, item_id)\n            VALUES (%s, %s, %s)\n        \"\"\", (merchant_id, character_id, item_id))\n\n        cursor.execute(\"\"\"\n            UPDATE personagem\n            SET moedas = moedas + %s\n            WHERE id = %s\n        \"\"\", (preco_venda, character_id))\n\n        conn.commit()\n        cursor.close()\n        return True\n    except Exception as e:\n        conn.rollback()\n        print(f\"Erro ao vender item: {e}\")\n        return False\n\n\ndef buy_item(conn, character_id, item_id, preco):\n    try:\n        with conn.cursor() as cur:\n            cur.execute(\"SELECT moedas FROM personagem WHERE id = %s\", (character_id,))\n            moedas = cur.fetchone()[0]\n            if moedas &lt; preco:\n                raise Exception(\"Moedas insuficientes\")\n\n            cur.execute(\"\"\"\n                UPDATE armazenamento\n                SET quantidade = quantidade - 1\n                WHERE item_id = %s AND quantidade &gt; 0\n                RETURNING id\n            \"\"\", (item_id,))\n            armazenamento_id = cur.fetchone()\n            if armazenamento_id is None:\n                raise Exception(\"Item n\u00e3o dispon\u00edvel no armazenamento\")\n\n            cur.execute(\"\"\"\n                INSERT INTO item_instancia (item_id, mochila_id)\n                VALUES (%s, (SELECT m.id FROM mochila m JOIN inventario i ON m.id = i.id WHERE i.personagem_id = %s))\n            \"\"\", (item_id, character_id))\n\n            cur.execute(\"\"\"\n                UPDATE personagem\n                SET moedas = moedas - %s\n                WHERE id = %s\n            \"\"\", (preco, character_id))\n\n            conn.commit()\n    except Exception as e:\n        conn.rollback()\n        raise e\n\n# function to transfer itens to your inventory\ndef transfer_item_to_inventory(conn, character_id, item_id, quantidade):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            UPDATE armazenamento\n            SET quantidade = quantidade - %s\n            WHERE item_id = %s AND id IN (\n                SELECT armazenamento_id \n                FROM sub_regiao \n                WHERE id = (\n                    SELECT sub_regiao_id \n                    FROM personagem \n                    WHERE id = %s\n                )\n            );\n            \"\"\",\n            (quantidade, item_id, character_id)\n        )\n\n        cur.execute(\n            \"\"\"\n            INSERT INTO item_instancia (item_id, mochila_id)\n            SELECT %s, m.id\n            FROM mochila m\n            JOIN inventario inv ON m.id = inv.id\n            WHERE inv.personagem_id = %s;\n            \"\"\",\n            (item_id, character_id)\n        )\n        conn.commit()\n</code></pre>"},{"location":"sql/dml/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 13/01/2024 Cria\u00e7\u00e3o Grupo <code>1.1</code> 13/01/2024 Atualiza\u00e7\u00e3o Grupo <code>1.2</code> 03/02/2025 Atualiza\u00e7\u00e3o entrega 3 Grupo <code>2.0</code> 10/02/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"sql/dql/","title":"Data Query Language - DQL","text":""},{"location":"sql/dql/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>DQL \u00e9 um conjunto de comandos que permitem consultar e recuperar dados de um banco de dados relacional.</p>"},{"location":"sql/dql/#dql","title":"DQL","text":"<pre><code># Function to get all items in a subregion\ndef get_subregion_items(conn, subregion_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT i.id, i.tipo, arm.quantidade, \n                   COALESCE(p.nome, ac.nome, po.nome) AS nome, \n                   COALESCE(p.descricao, ac.descricao, po.descricao) AS descricao\n            FROM armazenamento arm\n            JOIN item i ON arm.item_id = i.id\n            LEFT JOIN pergaminho p ON i.id = p.id\n            LEFT JOIN acessorio ac ON i.id = ac.id\n            LEFT JOIN pocao po ON i.id = po.id\n            WHERE arm.id IN (\n                SELECT armazenamento_id \n                FROM sub_regiao \n                WHERE id = %s\n            );\n            \"\"\",\n            (subregion_id,)\n        )\n        return cur.fetchall()\n\n# Check if can pickup itens\ndef can_pick_up_item(conn, character_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT COUNT(*) \n            FROM item_instancia ii\n            JOIN mochila m ON ii.mochila_id = m.id\n            JOIN inventario inv ON m.id = inv.id\n            WHERE inv.personagem_id = %s;\n            \"\"\",\n            (character_id,)\n        )\n        count = cur.fetchone()[0]\n        # verify is has enough space\n        cur.execute(\n            \"\"\"\n            SELECT peso_total \n            FROM mochila m\n            JOIN inventario inv ON m.id = inv.id\n            WHERE inv.personagem_id = %s;\n            \"\"\",\n            (character_id,)\n        )\n        peso_total = cur.fetchone()[0]\n        return count &lt; peso_total \n\n\ndef get_item_sell_price(conn, item_id):\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        SELECT preco FROM (\n            SELECT id, preco FROM pergaminho\n            UNION ALL\n            SELECT id, preco FROM acessorio\n            UNION ALL\n            SELECT id, preco FROM pocao\n        ) AS items\n        WHERE id = %s\n    \"\"\", (item_id,))\n    result = cursor.fetchone()\n    cursor.close()\n    return result[0] if result else 0\n\n# function to get all merchant items\ndef get_merchant_items(conn, mercador_id):\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT \n                i.id AS item_id,\n                COALESCE(p.nome, ac.nome, po.nome) AS nome,  -- Nome do item\n                COALESCE(p.preco, ac.preco, po.preco) AS preco,  -- Pre\u00e7o do item\n                ar.quantidade  -- Quantidade dispon\u00edvel\n            FROM armazenamento_mercador am\n            JOIN armazenamento ar ON am.armazenamento_id = ar.id\n            JOIN item i ON ar.item_id = i.id\n            LEFT JOIN pergaminho p ON i.id = p.id\n            LEFT JOIN acessorio ac ON i.id = ac.id\n            LEFT JOIN pocao po ON i.id = po.id\n            WHERE am.mercador_id = %s;\n        \"\"\", (mercador_id,))\n        return cur.fetchall()\n\n# function to get all merchant in a subregion\ndef get_merchants_subregion(conn, sub_regiao_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n                SELECT m.id, c.nome\n                FROM mercador m\n                JOIN civil c ON m.id = c.id\n                WHERE c.sub_regiao_id = {sub_regiao_id} \n            \"\"\"\n        )\n        return cur.fetchall()\n\n\n# Get character's info.\ndef get_character_info(conn, id: int) -&gt; Tuple:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT *\n            FROM personagem\n            WHERE id = {id};\n            \"\"\")\n        result = cur.fetchone()\n\n        return result\n\n# Get the inventory id of a character.\ndef get_inventory(conn, type: str, character_id: int) -&gt; int:\n\n    if type != 'mochila' and type != 'grimorio':\n        raise ValueError(\"Invalid type. Must be 'mochila' or 'grimorio'.\")\n\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT\n                inventario.id\n            FROM {type}\n            JOIN inventario ON personagem_id = {character_id} AND {type}.id = inventario.id;\n            \"\"\"\n        )\n        result = cur.fetchone()[0]\n        return result\n\n\ndef end_combat(conn, character_id: int, enemies_ids: List[int] = []) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT end_combat({character_id}, ARRAY{enemies_ids}::integer[]);\n            \"\"\"\n        )\n        result = cur.fetchall()\n        return result\n\n# Create a character.\ndef add_character(conn, nome: str, elemento: str) -&gt; None:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT criar_personagem(\n                '{nome}',\n                '{elemento}'\n            )\"\"\"\n        )\n        result = cur.fetchone()\n        conn.commit()\n        return result[0]\n\n# get regions and respective elements\ndef regions(conn):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT r.nome, r.elemento, r.descricao\n            FROM regiao r; \n            \"\"\"\n        )\n        result = cur.fetchall()\n        return result\n\n# get subregions from a region\ndef subregions(conn, region_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT sr.nome, sr.descricao\n            FROM sub_regiao sr\n            WHERE sr.regiao_id = %s;\n            \"\"\", (region_id,)\n        )\n        result = cur.fetchall()\n        return result\n\n# get subregions where character can go\ndef get_subregions_character(conn, sub_regiao_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT\n                sr2.id,\n                sr2.nome,\n                src.direcao,\n                src.situacao\n            FROM sub_regiao_conexao src\n            JOIN sub_regiao sr1 ON src.sub_regiao_1 = sr1.id\n            JOIN sub_regiao sr2 ON src.sub_regiao_2 = sr2.id\n            WHERE sr1.id = {sub_regiao_id};\n            \"\"\"\n        )\n        result = cur.fetchall()\n        return result\n\n# List enemys from a subregion\ndef get_alive_enemies_subregion(conn, sub_region_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT\n                ii.id,\n                i.nome,\n                i.descricao,\n                i.elemento,\n                ii.vida,\n                i.vida_maxima,\n                i.xp_obtido,\n                i.inteligencia,\n                i.moedas_obtidas,\n                i.conhecimento_arcano,\n                i.energia_arcana_maxima,\n                i.dialogo,\n                i.emoji\n            FROM inimigo i\n            JOIN inimigo_instancia ii ON i.id = ii.inimigo_id\n            JOIN sub_regiao sr ON ii.sub_regiao_id = sr.id\n            WHERE ii.sub_regiao_id = {sub_region_id} AND ii.vida &gt; 0;\n            \"\"\"\n        )\n        result = cur.fetchall()\n\n    return result\n\n# get enemy info \n#def get_enemy_info(conn, enemy_id):\n#    with conn.cursor() as cur:\n#        cur.execute(\n#            f\"\"\"\n#            SELECT\n#                i.nome,\n#                ii.id,\n#                i.descricao,\n#                i.elemento,\n#                ii.vida,\n#                i.vida_maxima,\n#                i.xp_obtido,\n#                i.inteligencia,\n#                i.moedas_obtidas,\n#                i.conhecimento_arcano,\n#                i.energia_arcana_maxima,\n#                i.emoji\n#            FROM inimigo i\n#            JOIN inimigo_instancia ii ON ii.inimigo_id = i.id\n#            WHERE n.id = {enemy_id};\n#            \"\"\"\n#        )\n#        result = cur.fetchone()\n#        return result\n\n# Function to get subregion description\ndef get_subregion_info(conn, sub_region_id: int):\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT\n                descricao,\n                nome\n            FROM sub_regiao WHERE id = {sub_region_id}\n            \"\"\"\n        )\n        result = cur.fetchone()\n        return result\n\n# List all citizens from a subregion.\ndef get_citizens_subregion(conn, sub_regiao_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n            SELECT \n                c.nome,\n                c.descricao,\n                COALESCE(\n                    CASE \n                        WHEN q.id IS NOT NULL THEN 'Quester'\n                        WHEN m.id IS NOT NULL THEN 'Mercador'\n                        ELSE 'Civil'\n                    END, \n                    c.tipo::TEXT\n                ) AS tipo\n            FROM civil c\n            LEFT JOIN quester q ON c.id = q.id\n            LEFT JOIN mercador m ON c.id = m.id\n            WHERE c.sub_regiao_id = {sub_regiao_id};\n            \"\"\"\n        )\n        result = cur.fetchall()\n        return result\n\n\ndef get_npc_details(conn, type):\n    with conn.cursor() as cur:\n\n        result = cur.fetchall()\n        return result\n\n\n# List all characters \ndef list_all_characters(conn):\n    with conn.cursor() as cur:\n        cur.execute(\"SELECT id, nome, elemento FROM personagem WHERE vida &gt; 0\")\n        result = cur.fetchall()\n        return result\n\n# Get all information of a character.\ndef get_character_info(conn, character_id):\n    with conn.cursor() as cur:\n        cur.execute(f\"SELECT * FROM personagem WHERE id = {character_id}\")\n        result = cur.fetchone()\n        return result\n\ndef list_item_inventory(conn, character_id):\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT id FROM inventario WHERE personagem_id = %s AND tipo = 'Mochila'\n        \"\"\", (character_id,))\n\n        inventarios = cur.fetchall()\n\n        items = []\n        for inventario in inventarios:\n            inventario_id = inventario[0]\n            cur.execute(\"\"\"\n                SELECT \n                    i.id AS item_id,  -- Adicione esta linha\n                    i.tipo,\n                    CASE \n                        WHEN i.tipo = 'Po\u00e7\u00e3o' THEN p.nome\n                        WHEN i.tipo = 'Pergaminho' THEN pe.nome\n                        WHEN i.tipo = 'Acess\u00f3rio' THEN a.nome\n                        ELSE 'Desconhecido'\n                    END AS nome,\n                    CASE \n                        WHEN i.tipo = 'Po\u00e7\u00e3o' THEN p.descricao\n                        WHEN i.tipo = 'Pergaminho' THEN pe.descricao\n                        WHEN i.tipo = 'Acess\u00f3rio' THEN a.descricao\n                        ELSE 'Sem descri\u00e7\u00e3o'\n                    END AS descricao,\n                    COUNT(ii.id) AS quantidade\n                FROM item_instancia ii\n                JOIN item i ON ii.item_id = i.id\n                LEFT JOIN pocao p ON i.id = p.id\n                LEFT JOIN pergaminho pe ON i.id = pe.id\n                LEFT JOIN acessorio a ON i.id = a.id\n                WHERE ii.mochila_id = %s\n                GROUP BY \n                    i.id,  -- Agrupe por item_id para garantir a unicidade\n                    i.tipo, \n                    p.nome, \n                    pe.nome, \n                    a.nome, \n                    p.descricao, \n                    pe.descricao, \n                    a.descricao\n            \"\"\", (inventario_id,))\n\n            items.extend(cur.fetchall())\n\n    return items  # return: (item_id, tipo, nome, descricao, quantidade)\n\ndef get_civilian_info(conn, npc_name):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT c.nome, c.descricao, c.id\n            FROM civil c\n            WHERE c.nome = %s;\n            \"\"\", (npc_name,)\n        )\n        result = cur.fetchone()\n        return {\n            'nome': result[0],\n            'descricao': result[1],\n            'npc_id': result[2]\n        }\n\n# get quest given a quester id \ndef get_quest(conn, quester_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            \"\"\"\n            SELECT q.titulo, q.descricao, qu.dialogo, q.id, q.recompensa\n            FROM quest q \n            LEFT JOIN quester qu ON qu.id = q.quester_id\n            WHERE q.quester_id = %s;\n            \"\"\", (quester_id,)\n        )\n        result = cur.fetchall()\n        return {\n            'title': result[0][0],\n            'description': result[0][1],\n            'dialog': result[0][2],\n            'quest_id': result[0][3],\n            'reward': result[0][4]\n        }\n\n\n\n## function to get all LERNED spells from player\n#def get_learned_spells(conn, character_id):\n#    with conn.cursor() as cursor:\n#        cursor.execute(\n#            f\"\"\"\n#                SELECT\n#                    *\n#                FROM feitico_aprendido fa\n#                WHERE fa.inventario_id = {character_id}\n#            \"\"\"\n#    )\n#        return cursor.fetchall()\n\n# function to get all Character damage spells\ndef get_damage_spells(conn, character_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n                SELECT\n                    fd.nome,\n                    f.tipo,\n                    fd.descricao, \n                    fd.energia_arcana,\n                    fd.dano_total\n                FROM inventario i \n                JOIN grimorio g ON i.id = g.id\n                JOIN feitico_aprendido fa ON g.id = fa.grimorio_id\n                JOIN feitico f ON f.id = fa.feitico_id\n                JOIN feitico_dano fd ON f.id = fd.id\n                WHERE i.personagem_id = {character_id};\n            \"\"\"\n        )\n        return cur.fetchall()\n\n# function to get all Character area damage spells\ndef get_damage_area_spells(conn, character_id):\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n                SELECT\n                    fda.nome,\n                    f.tipo,\n                    fda.descricao, \n                    fda.energia_arcana,\n                    fda.dano,\n                    fda.qtd_inimigos_afetados\n                FROM inventario i \n                JOIN grimorio g ON i.id = g.id\n                JOIN feitico_aprendido fa ON g.id = fa.grimorio_id\n                JOIN feitico f ON f.id = fa.feitico_id\n                JOIN feitico_dano_area fda ON f.id = fda.id\n                WHERE i.personagem_id = {character_id};\n            \"\"\"\n        )\n        return cur.fetchall()\n\n# function to get all Character healing spells\ndef get_healing_spells(conn, character_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\n            f\"\"\"\n                SELECT\n                    fc.nome,\n                    f.tipo,\n                    fc.descricao,\n                    fc.energia_arcana,\n                    fc.qtd_cura\n                FROM inventario i \n                JOIN grimorio g ON i.id = g.id\n                JOIN feitico_aprendido fa ON g.id = fa.grimorio_id\n                JOIN feitico f ON f.id = fa.feitico_id\n                JOIN feitico_cura fc ON f.id = fc.id\n                WHERE i.personagem_id = {character_id};\n            \"\"\"\n        )\n        return cur.fetchall()\n\n# function to get all Character potions\ndef get_potions(conn, character_id: int) -&gt; List[Tuple]:\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT\n                ii.id,\n                p.id,\n                p.nome,\n                p.descricao,\n                ii.usado\n            FROM pocao p\n            JOIN item_instancia ii ON p.id = ii.item_id\n            JOIN inventario inv ON ii.mochila_id = inv.id\n            WHERE inv.personagem_id = %s;\n        \"\"\", (character_id,))\n        return cur.fetchall()\n\n</code></pre>"},{"location":"sql/dql/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 13/01/2024 Cria\u00e7\u00e3o Grupo <code>1.1</code> 13/01/2024 Corre\u00e7\u00f5es e Adi\u00e7\u00f5es Grupo <code>2.0</code> 10/02/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"sql/procedures/","title":"PROCEDURES","text":""},{"location":"sql/procedures/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Stored Procedures s\u00e3o blocos de c\u00f3digo SQL armazenados no banco de dados, permitindo a execu\u00e7\u00e3o de v\u00e1rias instru\u00e7\u00f5es em uma \u00fanica unidade. Elas melhoram o desempenho ao reduzir a comunica\u00e7\u00e3o entre a aplica\u00e7\u00e3o e o banco, al\u00e9m de oferecerem mais seguran\u00e7a ao restringir o acesso direto a tabelas. Outra vantagem \u00e9 a manuten\u00e7\u00e3o simplificada, j\u00e1 que a l\u00f3gica pode ser centralizada no banco de dados, facilitando atualiza\u00e7\u00f5es sem a necessidade de alterar a aplica\u00e7\u00e3o. </p>"},{"location":"sql/procedures/#procedures_1","title":"Procedures","text":"<pre><code>-- PostGreSQL: create `civil` linking to `npc`\nCREATE OR REPLACE FUNCTION criar_civil(\n    IN nome VARCHAR(100),\n    IN sub_regiao_id INT,\n    IN descricao TEXT,\n    IN tipo TIPO_CIVIL\n) RETURNS INT AS $$\nDECLARE \n    npc_id INT;\nBEGIN\n\n    INSERT INTO npc (tipo)\n    VALUES ('Civil')\n    RETURNING id INTO npc_id;\n\n    INSERT INTO civil (\n        id,\n        sub_regiao_id,\n        tipo,\n        nome,\n        descricao\n    )\n    VALUES (\n        npc_id,\n        sub_regiao_id,\n        tipo::TIPO_CIVIL,\n        nome,\n        descricao\n    );\n\n    RETURN npc_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `quester` linking to `civil` using `criar_civil`.\nCREATE OR REPLACE FUNCTION criar_quester(\n    IN nome VARCHAR(100),\n    IN sub_regiao_id INT,\n    IN descricao TEXT,\n    IN dialogo TEXT\n) RETURNS INT AS $$\nDECLARE\n    npc_id INT;\nBEGIN\n    npc_id = criar_civil(nome, sub_regiao_id, descricao, 'Quester');\n\n    -- create line in table `quester` linking to `npc_id`.\n    INSERT INTO quester (\n        id,\n        num_quests,\n        dialogo\n    )\n    VALUES (\n        npc_id,\n        0,\n        dialogo\n    );\n\n    RETURN npc_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `mercador` linking to `npc`\nCREATE OR REPLACE FUNCTION criar_mercador(\n    IN nome VARCHAR(100),\n    IN sub_regiao_id INT,\n    IN descricao TEXT,\n    IN dialogo TEXT\n) RETURNS INT AS $$\nDECLARE\n    npc_id INT;\nBEGIN\n    npc_id = criar_civil(nome, sub_regiao_id, descricao, 'Mercador');\n\n    INSERT INTO mercador (\n        id,\n        dialogo\n    )\n    VALUES (\n        npc_id,\n        dialogo\n    );\n\n    RETURN npc_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n\n-- PostGreSQL: create enemy linking to npc.\nCREATE OR REPLACE FUNCTION criar_inimigo(\n    IN emoji TEXT,\n    IN nome VARCHAR(100),\n    IN descricao TEXT,\n    IN elemento TEXT,\n    IN vida_maxima INT,\n    IN xp_obtido INT,\n    IN inteligencia INT,\n    IN moedas_obtidas INT,\n    IN conhecimento_arcano INT,\n    IN energia_arcana_maxima INT,\n    IN dialogo TEXT\n) RETURNS INT AS $$\nDECLARE \n    npc_id INT;\nBEGIN\n    INSERT INTO npc (tipo)\n    VALUES ('Inimigo')\n    RETURNING id INTO npc_id;\n\n    INSERT INTO inimigo (\n        id,\n        emoji,\n        nome,\n        descricao,\n        elemento,\n        vida_maxima,\n        xp_obtido,\n        inteligencia,\n        moedas_obtidas,\n        conhecimento_arcano,\n        energia_arcana_maxima,\n        dialogo\n    )\n    VALUES (\n        npc_id,\n        emoji,\n        nome,\n        descricao,\n        elemento::TIPO_ELEMENTO,\n        vida_maxima,\n        xp_obtido,\n        inteligencia,\n        moedas_obtidas,\n        conhecimento_arcano,\n        energia_arcana_maxima,\n        dialogo\n    );\n    RETURN npc_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `personagem`\nCREATE OR REPLACE FUNCTION criar_personagem(\n    IN p_nome VARCHAR(20),\n    IN p_elemento TEXT\n) RETURNS INT AS $$\nDECLARE\n    v_personagem_id INT;\n    v_inventario_mochila_id INT;\n    v_inventario_grimorio_id INT;\nBEGIN\n    INSERT INTO personagem (\n        sub_regiao_id,\n        nome,\n        elemento,\n        conhecimento_arcano,\n        vida,\n        vida_maxima,\n        xp,\n        xp_total,\n        energia_arcana,\n        energia_arcana_maxima,\n        inteligencia,\n        moedas,\n        nivel\n    )\n    VALUES (\n        1,\n        p_nome,\n        p_elemento::TIPO_ELEMENTO,\n        10,\n        100,\n        100,\n        0,\n        10,\n        50,\n        50,\n        1,\n        15,\n        1\n    )\n    RETURNING id INTO v_personagem_id;\n    -- Criar o invent\u00e1rio do tipo Mochila\n    INSERT INTO inventario (personagem_id, tipo)\n    VALUES (v_personagem_id, 'Mochila')\n    RETURNING id INTO v_inventario_mochila_id;\n\n    INSERT INTO mochila (id, peso, peso_total)\n    VALUES (v_inventario_mochila_id, 0, 20);\n\n    --  Criar o invent\u00e1rio do tipo Grim\u00f3rio\n    INSERT INTO inventario (personagem_id, tipo)\n    VALUES (v_personagem_id, 'Grim\u00f3rio')\n    RETURNING id INTO v_inventario_grimorio_id;\n\n    INSERT INTO grimorio (id, num_pag, num_pag_maximo)\n    VALUES (v_inventario_grimorio_id, 0, 5);\n\n    RETURN v_personagem_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n\n-- PostGreSQL: create `acessorio`\nCREATE OR REPLACE FUNCTION criar_acessorio(\n  IN tipo TEXT,\n  IN descricao TEXT,\n  IN drop_inimigos_media INT,\n  IN nome VARCHAR(200),\n  IN peso INT,\n  IN preco INT  \n)\nRETURNS INT AS $$\nDECLARE\n     v_item_id INT;\nBEGIN\n     INSERT INTO item (tipo)\n     VALUES ('Acess\u00f3rio')\n     RETURNING id INTO v_item_id;\n\n     INSERT INTO acessorio (id, tipo, descricao, drop_inimigos_media, nome, peso, preco)\n     VALUES (v_item_id, tipo::TIPO_ACESSORIO, descricao, drop_inimigos_media, nome, peso, preco);\n\n     RETURN v_item_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `pergaminho`\nCREATE OR REPLACE FUNCTION criar_pergaminho(\n    IN p_descricao TEXT,\n    IN p_drop_inimigos_media INT,\n    IN p_nome VARCHAR(20),\n    IN p_peso INT,\n    IN p_preco INT,\n    IN p_cor TEXT\n) RETURNS INT AS $$\nDECLARE\n    v_item_id INT;\nBEGIN\n    -- create item.\n    INSERT INTO item (tipo)\n    VALUES ('Pergaminho')\n    RETURNING id INTO v_item_id;\n\n    -- create scroll.\n    INSERT INTO pergaminho (id, cor, descricao, drop_inimigos_media, nome, peso, preco)\n    VALUES (v_item_id, p_cor::TIPO_COR, p_descricao, p_drop_inimigos_media, p_nome, p_peso, p_preco);\n\n    RETURN v_item_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `pocao`\nCREATE OR REPLACE FUNCTION criar_pocao(\n    IN p_descricao TEXT,\n    IN p_drop_inimigos_media INT,\n    IN p_nome VARCHAR(20),\n    IN p_peso INT,\n    IN p_preco INT\n) RETURNS INT AS $$\nDECLARE\n    v_item_id INT;\nBEGIN\n    -- Criar o item da po\u00e7\u00e3o\n    INSERT INTO item (tipo)\n    VALUES ('Po\u00e7\u00e3o')\n    RETURNING id INTO v_item_id;\n\n    -- Criar a po\u00e7\u00e3o\n    INSERT INTO pocao (id, descricao, drop_inimigos_media, nome, peso, preco)\n    VALUES (v_item_id, p_descricao, p_drop_inimigos_media, p_nome, p_peso, p_preco);\n\n    RETURN v_item_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `feitico_dano`\nCREATE OR REPLACE FUNCTION criar_feitico_dano(\n    IN nome TEXT,\n    IN descricao TEXT ,\n    IN elemento TEXT, -- ::TIPO_ELEMENTO,\n    IN countdown INT,\n    IN conhecimento_arcano_necessario INT,\n    IN energia_arcana INT,\n    IN dano_total INT\n) RETURNS INT AS $$\nDECLARE\n    v_feitico_id INT;\nBEGIN\n    -- Criar o feitico\n    INSERT INTO feitico (tipo)\n    VALUES ('Dano')\n    RETURNING id INTO v_feitico_id;\n\n    -- Criar a feitico_dano\n    INSERT INTO feitico_dano (\n        id,\n        dano_total,\n        descricao,\n        elemento,\n        countdown,\n        conhecimento_arcano_necessario,\n        energia_arcana,\n        nome\n    )\n    VALUES (\n        v_feitico_id,\n        dano_total,\n        descricao,\n        elemento::TIPO_ELEMENTO,\n        countdown,\n        conhecimento_arcano_necessario,\n        energia_arcana,\n        nome\n    );\n\n    RETURN v_feitico_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n\n-- PostGreSQL: create `feitico_dano_area`\nCREATE OR REPLACE FUNCTION criar_feitico_dano_area(\n    IN nome TEXT,\n    IN descricao TEXT,\n    IN elemento TEXT, -- ::TIPO_ELEMENTO,\n    IN countdown INT,\n    IN conhecimento_arcano_necessario int,\n    IN energia_arcana INT,\n    IN dano INT,\n    IN qtd_inimigos_afetados INT\n) RETURNS INT AS $$\nDECLARE\n    v_feitico_id INT;\nBEGIN\n    -- Criar o feitico\n    INSERT INTO feitico (tipo)\n    VALUES ('Dano de \u00e1rea')\n    RETURNING id INTO v_feitico_id;\n\n    -- Criar a feitico_dano_area\n    INSERT INTO feitico_dano_area(id, \n        dano, qtd_inimigos_afetados, \n        descricao, \n        elemento, \n        countdown, \n        conhecimento_arcano_necessario, \n        energia_arcana,\n        nome\n    )\n    VALUES (v_feitico_id, \n        dano, \n        qtd_inimigos_afetados, \n        descricao, \n        elemento::TIPO_ELEMENTO, \n        countdown, \n        conhecimento_arcano_necessario, \n        energia_arcana,\n        nome);\n\n    RETURN v_feitico_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `feitico_cura`\nCREATE OR REPLACE FUNCTION criar_feitico_cura(\n    IN nome TEXT,\n    IN descricao TEXT,\n    IN elemento TIPO_ELEMENTO,\n    IN countdown INT,\n    IN conhecimento_arcano_necessario INT,\n    IN energia_arcana INT,\n    IN qtd_cura INT\n) RETURNS INT AS $$\nDECLARE\n    v_feitico_id INT;\nBEGIN\n    -- Criar o feitico\n    INSERT INTO feitico (tipo)\n    VALUES ('Cura')\n    RETURNING id INTO v_feitico_id;\n\n    -- Criar a feitico_cura\n    INSERT INTO feitico_cura (\n        id,\n        qtd_cura,\n        descricao,\n        elemento,\n        countdown,\n        conhecimento_arcano_necessario,\n        energia_arcana,\n        nome\n    )\n    VALUES (\n        v_feitico_id,\n        qtd_cura,\n        descricao,\n        elemento::TIPO_ELEMENTO,\n        countdown,\n        conhecimento_arcano_necessario,\n        energia_arcana,\n        nome\n    );\n\n    RETURN v_feitico_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PosGreSQL: create `atualizar_combate`\nCREATE OR REPLACE FUNCTION atualizar_combate(\n    IN p_personagem_id INT,\n    IN p_inimigo_id INT,\n    IN p_vida_personagem INT,\n    IN p_vida_inimigo INT\n) RETURNS INT AS $$\nDECLARE\n    v_personagem_id INT;\nBEGIN\n    -- Update character fields.\n    UPDATE personagem\n    SET vida = GREATEST(p_vida_personagem, 0)\n    WHERE id = p_personagem_id;\n\n    -- Update enemy fields.\n    UPDATE inimigo_instancia\n    SET vida = GREATEST(p_vida_inimigo, 0)\n    WHERE id = p_inimigo_id;\n\n    RETURN p_personagem_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `combate`\nCREATE OR REPLACE FUNCTION finalizar_combate(\n    IN p_id INT,\n    IN p_xp INT,\n    IN p_energia_arcana INT,\n    IN p_dano_recebido INT, \n    IN p_dano_causado INT,\n    IN ei_id INT\n) RETURNS INT[] AS $$\nDECLARE\n    v_armazenamentos RECORD;\n    list_items INT[];\nBEGIN\n    -- Update character fields.\n    UPDATE personagem\n    SET xp = LEAST(xp + p_xp, xp_total), \n        energia_arcana = LEAST(energia_arcana + p_energia_arcana, energia_arcana_maxima)\n    WHERE id = p_id;\n\n    -- To-do: if `xp` is equal to `xp_total`, increase `nivel` by 1 and set `xp` to 0, and update attributes.\n\n    -- Get items that can be dropped from this enemy.\n    SELECT\n        a.item_id,\n        a.quantidade,\n        i.drop_inimigos_media\n    INTO v_armazenamentos\n    FROM armazenamento_inimigo AS ai\n    JOIN armazenamento AS a ON ai.armazenamento_id = a.id\n    JOIN item AS i ON a.item_id = i.id\n    WHERE ai.inimigo_id = ei_id;\n\n    -- If the record variable `v_armazenamentos` is null, return the variable `list_items`.\n    IF v_armazenamentos IS NULL THEN\n        RETURN list_items;\n    END IF;\n\n    -- Generate items that will be dropped.\n    FOR i IN 1..v_armazenamentos.quantidade LOOP\n        IF random() &lt; 1 / v_armazenamentos.drop_inimigos_media THEN\n            list_items := list_items || v_armazenamentos.item_id;\n        END IF;\n    END LOOP;\n\n    -- Add to the table `combate`: inimigo_instancia_id, personagem_id, dano_cauisad, dano_recebido.\n    INSERT INTO combate (inimigo_instancia_id, personagem_id, dano_causado, dano_recebido)\n    VALUES (ei_id, p_id, p_dano_causado, p_dano_recebido);\n\n    RETURN list_items;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `aprender_feitico`\nCREATE OR REPLACE FUNCTION aprender_feitico(\n    IN p_personagem_id INT,\n    IN p_feitico_id INT\n) RETURNS INT AS $$\nDECLARE\n    v_inventario_id INT;\n    v_requisito_id INT;\n    v_pre_requisito_aprendido BOOLEAN;\n    v_possui_feitico_atual BOOLEAN;\n    v_conhecimento_arcano_suficiente BOOLEAN;\nBEGIN\n    SELECT id\n    INTO v_inventario_id\n    FROM inventario\n    WHERE personagem_id = p_personagem_id;\n\n    SELECT de_id\n    INTO v_requisito_id\n    FROM feitico_requerimento\n    WHERE para_id = p_feitico_id;\n\n    -- Verifica se j\u00e1 possui o feiti\u00e7o pr\u00e9-requisito\n    SELECT EXISTS (\n        SELECT 1\n        FROM feitico_aprendido\n        WHERE inventario_id = v_inventario_id\n          AND feitico_id = v_requisito_id\n    ) INTO v_pre_requisito_aprendido;\n\n    -- Verifica se j\u00e1 possui o feiti\u00e7o atual\n    SELECT EXISTS (\n        SELECT 1\n        FROM feitico_aprendido\n        WHERE inventario_id = v_inventario_id\n          AND feitico_id = p_feitico_id\n    ) INTO v_possui_feitico_atual;\n\n    -- Verifica se possui conhecimento arcano suficiente para o feiti\u00e7o\n    SELECT (p.conhecimento_arcano &gt;= f.conhecimento_arcano_necessario)\n    INTO v_conhecimento_arcano_suficiente\n    FROM personagem p\n    JOIN feitico f ON f.id = p_feitico_id\n    WHERE p.id = p_personagem_id;\n\n    -- S\u00f3 aprende o feiti\u00e7o se ainda n\u00e3o tiver, j\u00e1 possuir o pr\u00e9-requisito e tiver conhecimento arcano\n    IF NOT v_possui_feitico_atual\n       AND v_pre_requisito_aprendido\n       AND v_conhecimento_arcano_suficiente THEN\n        INSERT INTO feitico_aprendido(inventario_id, feitico_id)\n        VALUES (v_inventario_id, p_feitico_id);\n    END IF;\n\n    RETURN p_personagem_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `criar_transacao`\nCREATE OR REPLACE FUNCTION criar_transacao(\n    IN p_mercador_id INT,\n    IN p_personagem_id INT,\n    IN p_item_id INT\n) RETURNS INT AS $$\nDECLARE\n    v_inventario_id INT;\n    v_transacao_id INT;\nBEGIN\n    -- Select inventario personagem\n    SELECT id\n    INTO v_inventario_id\n    FROM inventario\n    WHERE personagem_id = p_personagem_id;\n\n    -- Criar instancia de Item\n    INSERT INTO item_instancia (item_id, inventario_id)\n    VALUES (p_item_id, v_inventario_id);\n\n    -- Cria transacao\n    INSERT INTO transacao (mercador_id, personagem_id, item_id)\n    VALUES (p_mercador_id, p_personagem_id, p_item_id)\n    RETURNING id INTO v_transacao_id;\n\n    RETURN v_transacao_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL: create `create_instance_quest`\nCREATE OR REPLACE FUNCTION create_new_instance_quest(\n    IN p_quest_id INT,\n    IN p_personagem_id INT,\n    IN p_regiao_nome VARCHAR(50)\n) RETURNS INT AS $$\nDECLARE\n    v_quest_instancia_id INT;\nBEGIN\n\n    -- Check if a quest with the same id and personagem_id already exists.\n    IF EXISTS (\n        SELECT 1\n        FROM quest_instancia\n        WHERE quest_id = p_quest_id AND personagem_id = p_personagem_id\n    ) THEN\n        RAISE EXCEPTION 'Quest instance already exists for this character and quest.';\n    END IF;\n\n    INSERT INTO quest_instancia (quest_id, personagem_id, completed)\n    VALUES (p_quest_id, p_personagem_id, FALSE)\n    RETURNING id INTO v_quest_instancia_id;\n\n    -- Atualiza a situa\u00e7\u00e3o das sub-regi\u00f5es da regi\u00e3o passada como argumento para \"Pass\u00e1vel\"\n    UPDATE sub_regiao_conexao\n    SET situacao = 'Pass\u00e1vel'\n    WHERE sub_regiao_2 IN (\n        SELECT id FROM sub_regiao WHERE regiao_id = (\n            SELECT id FROM regiao WHERE nome = p_regiao_nome\n        )\n    );\n\n    RETURN v_quest_instancia_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Remove potion effects and return potion IDs.\nCREATE OR REPLACE FUNCTION end_combat(\n    IN p_personagem_id INT,\n    IN enemies_id INT[]\n) RETURNS INT[] AS $$\nDECLARE\n    v_potions_id INT[];\n    item_rec INT[];\n    v_dropped_items_id INT[];\n    enemy_id INT;\n    potion_id INT;\nBEGIN\n    -- Get potion IDs that were marked as used.\n    SELECT ARRAY(\n        SELECT item_id\n        FROM item_instancia\n        WHERE usado = TRUE\n          AND mochila_id IN (\n            SELECT id FROM inventario WHERE personagem_id = p_personagem_id\n        )\n    ) INTO v_potions_id;\n\n    -- If v_potions_id is empty, return.\n    IF v_potions_id IS NULL THEN\n        RETURN v_potions_id;\n    END IF;\n\n    -- Loop through each potion's id in v_potions_id and remove their effect from personagem.\n    FOREACH potion_id IN ARRAY v_potions_id LOOP\n        UPDATE personagem\n        SET\n            inteligencia = inteligencia / (\n                SELECT inteligencia \n                FROM efeito \n                WHERE id IN (\n                    SELECT efeito_id \n                    FROM pocao_efeito \n                    WHERE pocao_id = potion_id\n                )\n            ),\n            vida_maxima = vida_maxima / (\n                SELECT vida \n                FROM efeito \n                WHERE id IN (\n                    SELECT efeito_id \n                    FROM pocao_efeito \n                    WHERE pocao_id = potion_id\n                )\n            ),\n            energia_arcana_maxima = energia_arcana_maxima / (\n                SELECT energia_arcana \n                FROM efeito \n                WHERE id IN (\n                    SELECT efeito_id \n                    FROM pocao_efeito \n                    WHERE pocao_id = potion_id\n                )\n            )\n        WHERE id = p_personagem_id;\n    END LOOP;\n\n    DELETE FROM item_instancia\n    WHERE usado = TRUE\n      AND mochila_id IN (\n        SELECT id FROM inventario WHERE personagem_id = p_personagem_id\n    );\n\n    v_dropped_items_id := '{}';\n\n    -- For each enemy, append all of its drop items to v_dropped_items_id.\n    FOREACH enemy_id IN ARRAY enemies_id LOOP\n        FOR item_rec IN\n            SELECT\n                a.item_id,\n                a.quantidade,\n                COALESCE(p.drop_inimigos_media, ac.drop_inimigos_media, po.drop_inimigos_media)\n            FROM armazenamento_inimigo ai\n            JOIN armazenamento a ON ai.armazenamento_id = a.id\n            JOIN item i ON a.item_id = i.id\n            JOIN acessorio ac ON i.id = ac.id\n            JOIN pergaminho p ON i.id = p.id\n            JOIN pocao po ON i.id = po.id\n            WHERE ai.inimigo_id = enemy_id\n        LOOP\n            FOR counter IN 1..item_rec.quantidade LOOP\n                IF random() &lt; 1.0 / item_rec.drop_inimigos_media THEN\n                    v_dropped_items_id := array_append(v_dropped_items_id, item_rec.item_id);\n                END IF;\n            END LOOP;\n        END LOOP;\n    END LOOP;\n\n    RETURN v_dropped_items_id;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>"},{"location":"sql/procedures/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 03/02/2025 Cria\u00e7\u00e3o Grupo <code>2.0</code> 10/02/2025 Atualiza\u00e7\u00e3o Grupo"},{"location":"sql/triggers/","title":"TRIGGERS","text":""},{"location":"sql/triggers/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Stored Procedures s\u00e3o blocos de c\u00f3digo SQL armazenados no banco de dados, permitindo a execu\u00e7\u00e3o de v\u00e1rias instru\u00e7\u00f5es em uma \u00fanica unidade. Elas melhoram o desempenho ao reduzir a comunica\u00e7\u00e3o entre a aplica\u00e7\u00e3o e o banco, al\u00e9m de oferecerem mais seguran\u00e7a ao restringir o acesso direto a tabelas. Outra vantagem \u00e9 a manuten\u00e7\u00e3o simplificada, j\u00e1 que a l\u00f3gica pode ser centralizada no banco de dados, facilitando atualiza\u00e7\u00f5es sem a necessidade de alterar a aplica\u00e7\u00e3o. </p>"},{"location":"sql/triggers/#triggers_1","title":"Triggers","text":"<pre><code>-- PostGreSQL:\n-- `incrementar_peso_acessorio`:\n-- when character gets a new `acessorio`, it will increment the `peso` of the `mochila`, and if it surpasses `peso_total`, do not allow.\n-- PostGreSQL:\nCREATE OR REPLACE FUNCTION incrementar_peso_acessorio()\nRETURNS TRIGGER AS $$\nDECLARE\n    item_peso INT;\nBEGIN\n    -- get item weight\n    SELECT COALESCE(a.peso, po.peso, pe.peso)\n    FROM acessorio a\n    LEFT JOIN pocao po ON po.id = NEW.item_id\n    LEFT JOIN pergaminho pe ON pe.id = NEW.item_id\n    INTO item_peso;\n\n    UPDATE mochila\n    SET peso = peso + item_peso\n    WHERE id = NEW.mochila_id;\n\n    IF (SELECT peso FROM mochila WHERE id = NEW.mochila_id) &gt; (SELECT peso_total FROM mochila WHERE id = NEW.mochila_id) THEN\n        RAISE EXCEPTION 'Peso total da mochila excedido';\n    END IF;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Link the trigger `incrementar_peso_acessorio` to the table `item_instancia` when a new row is created.\nCREATE TRIGGER trigger_incrementar_peso_acessorio\nAFTER INSERT ON item_instancia\nFOR EACH ROW\nEXECUTE FUNCTION incrementar_peso_acessorio();\n\n-- PostGreSQL:\n-- `decrementar_peso_acessorio`:\n-- when one `item_instancia` is deleted, it will decrement the `peso` of the `mochila`.\nCREATE OR REPLACE FUNCTION decrementar_peso_acessorio()\nRETURNS TRIGGER AS $$\nBEGIN\n    UPDATE mochila\n    SET peso = peso - OLD.peso\n    WHERE id = OLD.inventario_id;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL:\n-- When a quest_instancia is created, check if the character has an acessory that is in the armazenamento of the quest.\nCREATE OR REPLACE FUNCTION check_acessory()\nRETURNS TRIGGER AS $$\nBEGIN \n    -- Check if the character already has the item from the quest's armazenamento\n    IF EXISTS (SELECT 1 \n               FROM item_instancia \n               WHERE item_id IN (SELECT item_id \n                                 FROM armazenamento \n                                 WHERE quest_id = NEW.quest_id) \n               AND inventario_id = NEW.inventario_id) THEN\n        RAISE EXCEPTION 'Personagem already has the item';\n    END IF;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL\n-- When the character reaches maximum xp, increase the level and total xp\nCREATE OR REPLACE FUNCTION update_level()\nRETURNS TRIGGER AS $$\nBEGIN\n    WHILE NEW.xp &gt;= NEW.xp_total LOOP\n        NEW.nivel := NEW.nivel + 1;\n        NEW.xp_total := NEW.xp_total + 100;\n    END LOOP;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- PostGreSQL\n-- Buff character of the same element in the region\nCREATE OR REPLACE FUNCTION aplicar_buff()\nRETURNS TRIGGER AS $$\nDECLARE\n    regiao_elemento TIPO_ELEMENTO;\nBEGIN\n    SELECT r.elemento INTO regiao_elemento\n    FROM sub_regiao sr\n    JOIN regiao r ON sr.regiao_id = r.id\n    WHERE sr.id = NEW.sub_regiao_id;\n\n    IF regiao_elemento = NEW.elemento THEN\n        NEW.vida_maxima := CEIL(NEW.vida_maxima * 1.2);\n        NEW.energia_arcana_maxima := CEIL(NEW.energia_arcana_maxima * 1.1);\n    ELSE\n        NEW.vida_maxima := OLD.vida_maxima;\n        NEW.energia_arcana_maxima := OLD.energia_arcana_maxima;\n    END IF;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_aplicar_buff\nBEFORE UPDATE ON personagem\nFOR EACH ROW\nWHEN (NEW.sub_regiao_id IS DISTINCT FROM OLD.sub_regiao_id)\nEXECUTE FUNCTION aplicar_buff();\n\n-- PostGreSQL\n-- When adding transaction, create item instance in merchant storage\nCREATE OR REPLACE FUNCTION criar_instancia_item()\nRETURNS TRIGGER AS $$\nBEGIN\n\n    IF EXISTS (SELECT 1 FROM armazenamento_mercador WHERE mercador_id = NEW.mercador_id AND armazenamento_id = NEW.item_id) THEN\n\n        UPDATE armazenamento\n        SET quantidade = quantidade + 1\n        WHERE id = NEW.item_id;\n    ELSE\n\n        INSERT INTO armazenamento_mercador (mercador_id, armazenamento_id)\n        VALUES (NEW.mercador_id, NEW.item_id);\n\n\n        UPDATE armazenamento\n        SET quantidade = 1\n        WHERE id = NEW.item_id;\n    END IF;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_criar_instancia_item\nAFTER INSERT ON transacao\nFOR EACH ROW\nEXECUTE FUNCTION criar_instancia_item();\n\nCREATE OR REPLACE FUNCTION check_conclusion_quest()\nRETURNS TRIGGER AS $$\nDECLARE\n    v_inimigos_restantes INT;\n    v_personagem_id INT;  -- Variable to store the personagem_id\nBEGIN\n    -- Count how many enemies are still alive in the quest subregion\n    SELECT COUNT(*)\n    INTO v_inimigos_restantes\n    FROM inimigo_instancia\n    WHERE sub_regiao_id = NEW.sub_regiao_id AND vida &gt; 0;\n\n    -- If there are no enemies remaining, mark the quest as completed\n    IF v_inimigos_restantes = 0 THEN\n        -- Mark the quest as completed\n        UPDATE quest_instancia\n        SET completed = TRUE\n        WHERE quest_id = (SELECT id FROM quest WHERE sub_regiao_id = NEW.sub_regiao_id);\n\n        -- Retrieve the personagem_id associated with the quest\n        SELECT personagem_id\n        INTO v_personagem_id\n        FROM quest_instancia\n        WHERE quest_id = (SELECT quest_id FROM quest WHERE sub_regiao_id = NEW.sub_regiao_id);\n\n        -- Update character coins\n        UPDATE personagem\n        SET moedas = moedas + 100, xp = xp + 2\n        WHERE id = v_personagem_id;\n\n        -- Give to character the quest armazenamento items\n        INSERT INTO item_instancia (item_id, mochila_id, usado)\n        SELECT a.item_id, m.id, FALSE\n        FROM armazenamento a\n        JOIN quest q ON q.armazenamento_id = a.id\n        JOIN quest_instancia qi ON qi.quest_id = q.id AND qi.personagem_id = v_personagem_id\n        JOIN inventario i ON i.personagem_id = v_personagem_id\n        JOIN mochila m ON m.id = i.id\n        WHERE q.sub_regiao_id = NEW.sub_regiao_id;\n\n    END IF;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_check_conclusion_quest\nAFTER UPDATE ON inimigo_instancia\nFOR EACH ROW\nWHEN (NEW.vida &lt;= 0)\nEXECUTE FUNCTION check_conclusion_quest();\n\n-- Potion:\n--  When an \"instance of item\" that is an \"item\" of type \"potion\" is marked as used:\n--  Update character's fields multiplying by each potion's effect field multiplier.\nCREATE OR REPLACE FUNCTION use_potion()\nRETURNS TRIGGER AS $$\nDECLARE\n   v_personagem_id INT;\nBEGIN\n\n    -- If not potion, return.\n    IF NOT EXISTS (SELECT 1 FROM pocao WHERE id = NEW.item_id) THEN\n        RETURN NEW;\n    END IF;\n\n    -- Get `\u00b4personagem_id` from the `item_instancia` table.\n    SELECT\n        inventario.personagem_id INTO v_personagem_id\n    FROM item_instancia\n        JOIN mochila ON mochila.id = item_instancia.mochila_id\n        JOIN inventario ON inventario.id = mochila.id\n    WHERE item_instancia.id = NEW.id;\n\n    UPDATE personagem\n    SET\n        inteligencia = inteligencia * (SELECT inteligencia FROM efeito WHERE id IN (SELECT efeito_id FROM pocao_efeito WHERE pocao_id = NEW.item_id)),\n        vida = vida * (SELECT vida FROM efeito WHERE id IN (SELECT efeito_id FROM pocao_efeito WHERE pocao_id = NEW.item_id)),\n        vida_maxima = vida_maxima * (SELECT vida FROM efeito WHERE id IN (SELECT efeito_id FROM pocao_efeito WHERE pocao_id = NEW.item_id)),\n        energia_arcana_maxima = energia_arcana_maxima * (SELECT energia_arcana FROM efeito WHERE id IN (SELECT efeito_id FROM pocao_efeito WHERE pocao_id = NEW.item_id)),\n        energia_arcana = energia_arcana * (SELECT energia_arcana FROM efeito WHERE id IN (SELECT efeito_id FROM pocao_efeito WHERE pocao_id = NEW.item_id))\n    WHERE id = v_personagem_id;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- After updating \"item_instancia\" column value \"usado\", execute \"use_potion\" function.\nCREATE TRIGGER trigger_use_potion\nAFTER UPDATE ON item_instancia\nFOR EACH ROW\nWHEN (NEW.usado = TRUE)\nEXECUTE FUNCTION use_potion();\n</code></pre>"},{"location":"sql/triggers/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor <code>1.0</code> 03/02/2025 Cria\u00e7\u00e3o Grupo <code>2.0</code> 10/02/2025 Atualiza\u00e7\u00e3o Grupo"}]}